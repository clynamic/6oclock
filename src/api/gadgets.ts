/**
 * Generated by orval v7.13.0 🍺
 * Do not edit manually.
 * 5-thirty
 * backend data aggregate for 6 o'clock
 * OpenAPI spec version: 0.0.8
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  DailyActivity,
  Motd
} from './model';

import { makeRequest } from '../http/axios';
import type { ErrorType } from '../http/axios';





/**
 * Returns the message of the day selected for today based on date, schedule, and tier. Unauthenticated users receive the default message.
 * @summary Get today's message of the day
 */
export const motd = (
    
 signal?: AbortSignal
) => {
      
      
      return makeRequest<Motd>(
      {url: `/gadgets/motd`, method: 'GET', signal
    },
      );
    }
  

export const getMotdQueryKey = () => {
    return [`/gadgets/motd`] as const;
    }

    
export const getMotdQueryOptions = <TData = Awaited<ReturnType<typeof motd>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof motd>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMotdQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof motd>>> = ({ signal }) => motd(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof motd>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type MotdQueryResult = NonNullable<Awaited<ReturnType<typeof motd>>>
export type MotdQueryError = ErrorType<unknown>


export function useMotd<TData = Awaited<ReturnType<typeof motd>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof motd>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof motd>>,
          TError,
          Awaited<ReturnType<typeof motd>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMotd<TData = Awaited<ReturnType<typeof motd>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof motd>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof motd>>,
          TError,
          Awaited<ReturnType<typeof motd>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMotd<TData = Awaited<ReturnType<typeof motd>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof motd>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get today's message of the day
 */

export function useMotd<TData = Awaited<ReturnType<typeof motd>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof motd>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getMotdQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Returns today's activity counter
 * @summary Get today's activity counter
 */
export const dailyActivity = (
    
 signal?: AbortSignal
) => {
      
      
      return makeRequest<DailyActivity>(
      {url: `/gadgets/activity`, method: 'GET', signal
    },
      );
    }
  

export const getDailyActivityQueryKey = () => {
    return [`/gadgets/activity`] as const;
    }

    
export const getDailyActivityQueryOptions = <TData = Awaited<ReturnType<typeof dailyActivity>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dailyActivity>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDailyActivityQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof dailyActivity>>> = ({ signal }) => dailyActivity(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof dailyActivity>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DailyActivityQueryResult = NonNullable<Awaited<ReturnType<typeof dailyActivity>>>
export type DailyActivityQueryError = ErrorType<unknown>


export function useDailyActivity<TData = Awaited<ReturnType<typeof dailyActivity>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof dailyActivity>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof dailyActivity>>,
          TError,
          Awaited<ReturnType<typeof dailyActivity>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDailyActivity<TData = Awaited<ReturnType<typeof dailyActivity>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dailyActivity>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof dailyActivity>>,
          TError,
          Awaited<ReturnType<typeof dailyActivity>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDailyActivity<TData = Awaited<ReturnType<typeof dailyActivity>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dailyActivity>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get today's activity counter
 */

export function useDailyActivity<TData = Awaited<ReturnType<typeof dailyActivity>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dailyActivity>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDailyActivityQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



