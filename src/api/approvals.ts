/**
 * Generated by orval v7.0.1 🍺
 * Do not edit manually.
 * 5-thirty
 * backend data aggregate for 6 o'clock
 * OpenAPI spec version: 0.0.1
 */
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { useQuery } from "@tanstack/react-query";

import type { ErrorType } from "../http/axios";
import { makeRequest } from "../http/axios";
import type {
  ApprovalCountPoint,
  ApprovalCountSummary,
  GetApprovalCountSeriesParams,
  GetApprovalCountSummaryParams,
  GetJanitorSummaryParams,
  JanitorSummary,
} from "./model";

/**
 * Get total approval counts for a given date range
 * @summary Approval count summary
 */
export const approvalCountSummary = (
  params?: GetApprovalCountSummaryParams,
  signal?: AbortSignal,
) => {
  return makeRequest<ApprovalCountSummary>({
    url: `/approvals/metrics/count/summary`,
    method: "GET",
    params,
    signal,
  });
};

export const getApprovalCountSummaryQueryKey = (
  params?: GetApprovalCountSummaryParams,
) => {
  return [
    `/approvals/metrics/count/summary`,
    ...(params ? [params] : []),
  ] as const;
};

export const getApprovalCountSummaryQueryOptions = <
  TData = Awaited<ReturnType<typeof approvalCountSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetApprovalCountSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof approvalCountSummary>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getApprovalCountSummaryQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof approvalCountSummary>>
  > = ({ signal }) => approvalCountSummary(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof approvalCountSummary>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ApprovalCountSummaryQueryResult = NonNullable<
  Awaited<ReturnType<typeof approvalCountSummary>>
>;
export type ApprovalCountSummaryQueryError = ErrorType<unknown>;

export function useApprovalCountSummary<
  TData = Awaited<ReturnType<typeof approvalCountSummary>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetApprovalCountSummaryParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof approvalCountSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof approvalCountSummary>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useApprovalCountSummary<
  TData = Awaited<ReturnType<typeof approvalCountSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetApprovalCountSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof approvalCountSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof approvalCountSummary>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useApprovalCountSummary<
  TData = Awaited<ReturnType<typeof approvalCountSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetApprovalCountSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof approvalCountSummary>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Approval count summary
 */

export function useApprovalCountSummary<
  TData = Awaited<ReturnType<typeof approvalCountSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetApprovalCountSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof approvalCountSummary>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getApprovalCountSummaryQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get a time series of approval counts for a given date range
 * @summary Approval count series
 */
export const approvalCountSeries = (
  params?: GetApprovalCountSeriesParams,
  signal?: AbortSignal,
) => {
  return makeRequest<ApprovalCountPoint[]>({
    url: `/approvals/metrics/count/series`,
    method: "GET",
    params,
    signal,
  });
};

export const getApprovalCountSeriesQueryKey = (
  params?: GetApprovalCountSeriesParams,
) => {
  return [
    `/approvals/metrics/count/series`,
    ...(params ? [params] : []),
  ] as const;
};

export const getApprovalCountSeriesQueryOptions = <
  TData = Awaited<ReturnType<typeof approvalCountSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetApprovalCountSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof approvalCountSeries>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getApprovalCountSeriesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof approvalCountSeries>>
  > = ({ signal }) => approvalCountSeries(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof approvalCountSeries>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ApprovalCountSeriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof approvalCountSeries>>
>;
export type ApprovalCountSeriesQueryError = ErrorType<unknown>;

export function useApprovalCountSeries<
  TData = Awaited<ReturnType<typeof approvalCountSeries>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetApprovalCountSeriesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof approvalCountSeries>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof approvalCountSeries>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useApprovalCountSeries<
  TData = Awaited<ReturnType<typeof approvalCountSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetApprovalCountSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof approvalCountSeries>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof approvalCountSeries>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useApprovalCountSeries<
  TData = Awaited<ReturnType<typeof approvalCountSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetApprovalCountSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof approvalCountSeries>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Approval count series
 */

export function useApprovalCountSeries<
  TData = Awaited<ReturnType<typeof approvalCountSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetApprovalCountSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof approvalCountSeries>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getApprovalCountSeriesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get a summary of the top 20 janitors by approval count for a given date range
 * @summary Janitor summary
 */
export const janitorSummary = (
  params?: GetJanitorSummaryParams,
  signal?: AbortSignal,
) => {
  return makeRequest<JanitorSummary[]>({
    url: `/approvals/metrics/janitor/summary`,
    method: "GET",
    params,
    signal,
  });
};

export const getJanitorSummaryQueryKey = (params?: GetJanitorSummaryParams) => {
  return [
    `/approvals/metrics/janitor/summary`,
    ...(params ? [params] : []),
  ] as const;
};

export const getJanitorSummaryQueryOptions = <
  TData = Awaited<ReturnType<typeof janitorSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetJanitorSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof janitorSummary>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getJanitorSummaryQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof janitorSummary>>> = ({
    signal,
  }) => janitorSummary(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof janitorSummary>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type JanitorSummaryQueryResult = NonNullable<
  Awaited<ReturnType<typeof janitorSummary>>
>;
export type JanitorSummaryQueryError = ErrorType<unknown>;

export function useJanitorSummary<
  TData = Awaited<ReturnType<typeof janitorSummary>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetJanitorSummaryParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof janitorSummary>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof janitorSummary>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useJanitorSummary<
  TData = Awaited<ReturnType<typeof janitorSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetJanitorSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof janitorSummary>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof janitorSummary>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useJanitorSummary<
  TData = Awaited<ReturnType<typeof janitorSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetJanitorSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof janitorSummary>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Janitor summary
 */

export function useJanitorSummary<
  TData = Awaited<ReturnType<typeof janitorSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetJanitorSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof janitorSummary>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getJanitorSummaryQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
