/**
 * Generated by orval v7.0.1 🍺
 * Do not edit manually.
 * 5-thirty
 * backend data aggregate for 6 o'clock
 * OpenAPI spec version: 0.0.2
 */
import { useInfiniteQuery, useQuery } from '@tanstack/react-query';
import type {
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import type {
  GetHandlerSummaryParams,
  GetReporterSummaryParams,
  GetTicketActivitySummaryForHandlerParams,
  GetTicketActivitySummaryParams,
  GetTicketAgeSeriesParams,
  GetTicketAgeSummaryParams,
  GetTicketClosedSeriesForHandlerParams,
  GetTicketClosedSeriesParams,
  GetTicketCreatedSeriesForReporterParams,
  GetTicketCreatedSeriesParams,
  GetTicketOpenSeriesParams,
  GetTicketStatusSummaryParams,
  GetTicketTypeSummaryForHandlerParams,
  GetTicketTypeSummaryParams,
  TicketActivityPoint,
  TicketAgeSeriesPoint,
  TicketAgeSummary,
  TicketClosedPoint,
  TicketCreatedPoint,
  TicketHandlerSummary,
  TicketOpenPoint,
  TicketReporterSummary,
  TicketStatusSummary,
  TicketTypeSummary,
} from './model';
import { makeRequest } from '../http/axios';
import type { ErrorType } from '../http/axios';

/**
 * Get ticket status (pending, approved, partial) counts for a given date range
 * @summary Ticket status summary
 */
export const ticketStatusSummary = (
  params?: GetTicketStatusSummaryParams,
  signal?: AbortSignal,
) => {
  return makeRequest<TicketStatusSummary>({
    url: `/tickets/metrics/status/summary`,
    method: 'GET',
    params,
    signal,
  });
};

export const getTicketStatusSummaryQueryKey = (
  params?: GetTicketStatusSummaryParams,
) => {
  return [
    `/tickets/metrics/status/summary`,
    ...(params ? [params] : []),
  ] as const;
};

export const getTicketStatusSummaryQueryOptions = <
  TData = Awaited<ReturnType<typeof ticketStatusSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketStatusSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketStatusSummary>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTicketStatusSummaryQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ticketStatusSummary>>
  > = ({ signal }) => ticketStatusSummary(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof ticketStatusSummary>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TicketStatusSummaryQueryResult = NonNullable<
  Awaited<ReturnType<typeof ticketStatusSummary>>
>;
export type TicketStatusSummaryQueryError = ErrorType<unknown>;

export function useTicketStatusSummary<
  TData = Awaited<ReturnType<typeof ticketStatusSummary>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetTicketStatusSummaryParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketStatusSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketStatusSummary>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketStatusSummary<
  TData = Awaited<ReturnType<typeof ticketStatusSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketStatusSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketStatusSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketStatusSummary>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketStatusSummary<
  TData = Awaited<ReturnType<typeof ticketStatusSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketStatusSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketStatusSummary>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Ticket status summary
 */

export function useTicketStatusSummary<
  TData = Awaited<ReturnType<typeof ticketStatusSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketStatusSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketStatusSummary>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTicketStatusSummaryQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get ticket types counts for a given date range
 * @summary Ticket type summary
 */
export const ticketTypeSummary = (
  params?: GetTicketTypeSummaryParams,
  signal?: AbortSignal,
) => {
  return makeRequest<TicketTypeSummary>({
    url: `/tickets/metrics/type/summary`,
    method: 'GET',
    params,
    signal,
  });
};

export const getTicketTypeSummaryQueryKey = (
  params?: GetTicketTypeSummaryParams,
) => {
  return [
    `/tickets/metrics/type/summary`,
    ...(params ? [params] : []),
  ] as const;
};

export const getTicketTypeSummaryQueryOptions = <
  TData = Awaited<ReturnType<typeof ticketTypeSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketTypeSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketTypeSummary>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTicketTypeSummaryQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ticketTypeSummary>>
  > = ({ signal }) => ticketTypeSummary(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof ticketTypeSummary>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TicketTypeSummaryQueryResult = NonNullable<
  Awaited<ReturnType<typeof ticketTypeSummary>>
>;
export type TicketTypeSummaryQueryError = ErrorType<unknown>;

export function useTicketTypeSummary<
  TData = Awaited<ReturnType<typeof ticketTypeSummary>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetTicketTypeSummaryParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketTypeSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketTypeSummary>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketTypeSummary<
  TData = Awaited<ReturnType<typeof ticketTypeSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketTypeSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketTypeSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketTypeSummary>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketTypeSummary<
  TData = Awaited<ReturnType<typeof ticketTypeSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketTypeSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketTypeSummary>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Ticket type summary
 */

export function useTicketTypeSummary<
  TData = Awaited<ReturnType<typeof ticketTypeSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketTypeSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketTypeSummary>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTicketTypeSummaryQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get ticket types counts for a given date range for a specific handler
 * @summary Ticket type summary for a handler
 */
export const ticketTypeSummaryForHandler = (
  claimantId: number,
  params?: GetTicketTypeSummaryForHandlerParams,
  signal?: AbortSignal,
) => {
  return makeRequest<TicketTypeSummary>({
    url: `/tickets/metrics/type/summary/handler/${encodeURIComponent(String(claimantId))}`,
    method: 'GET',
    params,
    signal,
  });
};

export const getTicketTypeSummaryForHandlerQueryKey = (
  claimantId: number,
  params?: GetTicketTypeSummaryForHandlerParams,
) => {
  return [
    `/tickets/metrics/type/summary/handler/${claimantId}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getTicketTypeSummaryForHandlerQueryOptions = <
  TData = Awaited<ReturnType<typeof ticketTypeSummaryForHandler>>,
  TError = ErrorType<unknown>,
>(
  claimantId: number,
  params?: GetTicketTypeSummaryForHandlerParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketTypeSummaryForHandler>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getTicketTypeSummaryForHandlerQueryKey(claimantId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ticketTypeSummaryForHandler>>
  > = ({ signal }) => ticketTypeSummaryForHandler(claimantId, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!claimantId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof ticketTypeSummaryForHandler>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TicketTypeSummaryForHandlerQueryResult = NonNullable<
  Awaited<ReturnType<typeof ticketTypeSummaryForHandler>>
>;
export type TicketTypeSummaryForHandlerQueryError = ErrorType<unknown>;

export function useTicketTypeSummaryForHandler<
  TData = Awaited<ReturnType<typeof ticketTypeSummaryForHandler>>,
  TError = ErrorType<unknown>,
>(
  claimantId: number,
  params: undefined | GetTicketTypeSummaryForHandlerParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketTypeSummaryForHandler>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketTypeSummaryForHandler>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketTypeSummaryForHandler<
  TData = Awaited<ReturnType<typeof ticketTypeSummaryForHandler>>,
  TError = ErrorType<unknown>,
>(
  claimantId: number,
  params?: GetTicketTypeSummaryForHandlerParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketTypeSummaryForHandler>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketTypeSummaryForHandler>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketTypeSummaryForHandler<
  TData = Awaited<ReturnType<typeof ticketTypeSummaryForHandler>>,
  TError = ErrorType<unknown>,
>(
  claimantId: number,
  params?: GetTicketTypeSummaryForHandlerParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketTypeSummaryForHandler>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Ticket type summary for a handler
 */

export function useTicketTypeSummaryForHandler<
  TData = Awaited<ReturnType<typeof ticketTypeSummaryForHandler>>,
  TError = ErrorType<unknown>,
>(
  claimantId: number,
  params?: GetTicketTypeSummaryForHandlerParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketTypeSummaryForHandler>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTicketTypeSummaryForHandlerQueryOptions(
    claimantId,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get a time series of open tickets for a given date range
 * @summary Ticket open series
 */
export const ticketOpenSeries = (
  params?: GetTicketOpenSeriesParams,
  signal?: AbortSignal,
) => {
  return makeRequest<TicketOpenPoint[]>({
    url: `/tickets/metrics/open/series`,
    method: 'GET',
    params,
    signal,
  });
};

export const getTicketOpenSeriesQueryKey = (
  params?: GetTicketOpenSeriesParams,
) => {
  return [`/tickets/metrics/open/series`, ...(params ? [params] : [])] as const;
};

export const getTicketOpenSeriesQueryOptions = <
  TData = Awaited<ReturnType<typeof ticketOpenSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketOpenSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketOpenSeries>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTicketOpenSeriesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ticketOpenSeries>>
  > = ({ signal }) => ticketOpenSeries(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof ticketOpenSeries>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TicketOpenSeriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof ticketOpenSeries>>
>;
export type TicketOpenSeriesQueryError = ErrorType<unknown>;

export function useTicketOpenSeries<
  TData = Awaited<ReturnType<typeof ticketOpenSeries>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetTicketOpenSeriesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketOpenSeries>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketOpenSeries>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketOpenSeries<
  TData = Awaited<ReturnType<typeof ticketOpenSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketOpenSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketOpenSeries>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketOpenSeries>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketOpenSeries<
  TData = Awaited<ReturnType<typeof ticketOpenSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketOpenSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketOpenSeries>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Ticket open series
 */

export function useTicketOpenSeries<
  TData = Awaited<ReturnType<typeof ticketOpenSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketOpenSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketOpenSeries>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTicketOpenSeriesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get a time series of created tickets for a given date range
 * @summary Ticket created series
 */
export const ticketCreatedSeries = (
  params?: GetTicketCreatedSeriesParams,
  signal?: AbortSignal,
) => {
  return makeRequest<TicketCreatedPoint[]>({
    url: `/tickets/metrics/created/series`,
    method: 'GET',
    params,
    signal,
  });
};

export const getTicketCreatedSeriesQueryKey = (
  params?: GetTicketCreatedSeriesParams,
) => {
  return [
    `/tickets/metrics/created/series`,
    ...(params ? [params] : []),
  ] as const;
};

export const getTicketCreatedSeriesQueryOptions = <
  TData = Awaited<ReturnType<typeof ticketCreatedSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketCreatedSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketCreatedSeries>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTicketCreatedSeriesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ticketCreatedSeries>>
  > = ({ signal }) => ticketCreatedSeries(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof ticketCreatedSeries>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TicketCreatedSeriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof ticketCreatedSeries>>
>;
export type TicketCreatedSeriesQueryError = ErrorType<unknown>;

export function useTicketCreatedSeries<
  TData = Awaited<ReturnType<typeof ticketCreatedSeries>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetTicketCreatedSeriesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketCreatedSeries>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketCreatedSeries>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketCreatedSeries<
  TData = Awaited<ReturnType<typeof ticketCreatedSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketCreatedSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketCreatedSeries>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketCreatedSeries>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketCreatedSeries<
  TData = Awaited<ReturnType<typeof ticketCreatedSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketCreatedSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketCreatedSeries>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Ticket created series
 */

export function useTicketCreatedSeries<
  TData = Awaited<ReturnType<typeof ticketCreatedSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketCreatedSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketCreatedSeries>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTicketCreatedSeriesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get a time series of created tickets for a given date range for a specific reporter
 * @summary Ticket created series for a reporter
 */
export const ticketCreatedSeriesForReporter = (
  repoterId: number,
  params?: GetTicketCreatedSeriesForReporterParams,
  signal?: AbortSignal,
) => {
  return makeRequest<TicketCreatedPoint[]>({
    url: `/tickets/metrics/created/series/${encodeURIComponent(String(repoterId))}`,
    method: 'GET',
    params,
    signal,
  });
};

export const getTicketCreatedSeriesForReporterQueryKey = (
  repoterId: number,
  params?: GetTicketCreatedSeriesForReporterParams,
) => {
  return [
    `/tickets/metrics/created/series/${repoterId}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getTicketCreatedSeriesForReporterQueryOptions = <
  TData = Awaited<ReturnType<typeof ticketCreatedSeriesForReporter>>,
  TError = ErrorType<unknown>,
>(
  repoterId: number,
  params?: GetTicketCreatedSeriesForReporterParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketCreatedSeriesForReporter>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getTicketCreatedSeriesForReporterQueryKey(repoterId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ticketCreatedSeriesForReporter>>
  > = ({ signal }) => ticketCreatedSeriesForReporter(repoterId, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!repoterId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof ticketCreatedSeriesForReporter>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TicketCreatedSeriesForReporterQueryResult = NonNullable<
  Awaited<ReturnType<typeof ticketCreatedSeriesForReporter>>
>;
export type TicketCreatedSeriesForReporterQueryError = ErrorType<unknown>;

export function useTicketCreatedSeriesForReporter<
  TData = Awaited<ReturnType<typeof ticketCreatedSeriesForReporter>>,
  TError = ErrorType<unknown>,
>(
  repoterId: number,
  params: undefined | GetTicketCreatedSeriesForReporterParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketCreatedSeriesForReporter>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketCreatedSeriesForReporter>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketCreatedSeriesForReporter<
  TData = Awaited<ReturnType<typeof ticketCreatedSeriesForReporter>>,
  TError = ErrorType<unknown>,
>(
  repoterId: number,
  params?: GetTicketCreatedSeriesForReporterParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketCreatedSeriesForReporter>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketCreatedSeriesForReporter>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketCreatedSeriesForReporter<
  TData = Awaited<ReturnType<typeof ticketCreatedSeriesForReporter>>,
  TError = ErrorType<unknown>,
>(
  repoterId: number,
  params?: GetTicketCreatedSeriesForReporterParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketCreatedSeriesForReporter>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Ticket created series for a reporter
 */

export function useTicketCreatedSeriesForReporter<
  TData = Awaited<ReturnType<typeof ticketCreatedSeriesForReporter>>,
  TError = ErrorType<unknown>,
>(
  repoterId: number,
  params?: GetTicketCreatedSeriesForReporterParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketCreatedSeriesForReporter>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTicketCreatedSeriesForReporterQueryOptions(
    repoterId,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get a time series of closed tickets for a given date range
 * @summary Ticket closed series
 */
export const ticketClosedSeries = (
  params?: GetTicketClosedSeriesParams,
  signal?: AbortSignal,
) => {
  return makeRequest<TicketClosedPoint[]>({
    url: `/tickets/metrics/closed/series`,
    method: 'GET',
    params,
    signal,
  });
};

export const getTicketClosedSeriesQueryKey = (
  params?: GetTicketClosedSeriesParams,
) => {
  return [
    `/tickets/metrics/closed/series`,
    ...(params ? [params] : []),
  ] as const;
};

export const getTicketClosedSeriesQueryOptions = <
  TData = Awaited<ReturnType<typeof ticketClosedSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketClosedSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketClosedSeries>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTicketClosedSeriesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ticketClosedSeries>>
  > = ({ signal }) => ticketClosedSeries(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof ticketClosedSeries>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TicketClosedSeriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof ticketClosedSeries>>
>;
export type TicketClosedSeriesQueryError = ErrorType<unknown>;

export function useTicketClosedSeries<
  TData = Awaited<ReturnType<typeof ticketClosedSeries>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetTicketClosedSeriesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketClosedSeries>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketClosedSeries>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketClosedSeries<
  TData = Awaited<ReturnType<typeof ticketClosedSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketClosedSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketClosedSeries>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketClosedSeries>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketClosedSeries<
  TData = Awaited<ReturnType<typeof ticketClosedSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketClosedSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketClosedSeries>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Ticket closed series
 */

export function useTicketClosedSeries<
  TData = Awaited<ReturnType<typeof ticketClosedSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketClosedSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketClosedSeries>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTicketClosedSeriesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get a time series of closed tickets for a given date range for a specific handler
 * @summary Ticket closed series for a handler
 */
export const ticketClosedSeriesForHandler = (
  handlerId: number,
  params?: GetTicketClosedSeriesForHandlerParams,
  signal?: AbortSignal,
) => {
  return makeRequest<TicketClosedPoint[]>({
    url: `/tickets/metrics/closed/series/${encodeURIComponent(String(handlerId))}`,
    method: 'GET',
    params,
    signal,
  });
};

export const getTicketClosedSeriesForHandlerQueryKey = (
  handlerId: number,
  params?: GetTicketClosedSeriesForHandlerParams,
) => {
  return [
    `/tickets/metrics/closed/series/${handlerId}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getTicketClosedSeriesForHandlerQueryOptions = <
  TData = Awaited<ReturnType<typeof ticketClosedSeriesForHandler>>,
  TError = ErrorType<unknown>,
>(
  handlerId: number,
  params?: GetTicketClosedSeriesForHandlerParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketClosedSeriesForHandler>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getTicketClosedSeriesForHandlerQueryKey(handlerId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ticketClosedSeriesForHandler>>
  > = ({ signal }) => ticketClosedSeriesForHandler(handlerId, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!handlerId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof ticketClosedSeriesForHandler>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TicketClosedSeriesForHandlerQueryResult = NonNullable<
  Awaited<ReturnType<typeof ticketClosedSeriesForHandler>>
>;
export type TicketClosedSeriesForHandlerQueryError = ErrorType<unknown>;

export function useTicketClosedSeriesForHandler<
  TData = Awaited<ReturnType<typeof ticketClosedSeriesForHandler>>,
  TError = ErrorType<unknown>,
>(
  handlerId: number,
  params: undefined | GetTicketClosedSeriesForHandlerParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketClosedSeriesForHandler>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketClosedSeriesForHandler>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketClosedSeriesForHandler<
  TData = Awaited<ReturnType<typeof ticketClosedSeriesForHandler>>,
  TError = ErrorType<unknown>,
>(
  handlerId: number,
  params?: GetTicketClosedSeriesForHandlerParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketClosedSeriesForHandler>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketClosedSeriesForHandler>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketClosedSeriesForHandler<
  TData = Awaited<ReturnType<typeof ticketClosedSeriesForHandler>>,
  TError = ErrorType<unknown>,
>(
  handlerId: number,
  params?: GetTicketClosedSeriesForHandlerParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketClosedSeriesForHandler>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Ticket closed series for a handler
 */

export function useTicketClosedSeriesForHandler<
  TData = Awaited<ReturnType<typeof ticketClosedSeriesForHandler>>,
  TError = ErrorType<unknown>,
>(
  handlerId: number,
  params?: GetTicketClosedSeriesForHandlerParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketClosedSeriesForHandler>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTicketClosedSeriesForHandlerQueryOptions(
    handlerId,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get a summary of ticket activity per hour for a given date range
 * @summary Ticket activity summary
 */
export const ticketActivitySummary = (
  params?: GetTicketActivitySummaryParams,
  signal?: AbortSignal,
) => {
  return makeRequest<TicketActivityPoint[]>({
    url: `/tickets/metrics/activity/summary`,
    method: 'GET',
    params,
    signal,
  });
};

export const getTicketActivitySummaryQueryKey = (
  params?: GetTicketActivitySummaryParams,
) => {
  return [
    `/tickets/metrics/activity/summary`,
    ...(params ? [params] : []),
  ] as const;
};

export const getTicketActivitySummaryQueryOptions = <
  TData = Awaited<ReturnType<typeof ticketActivitySummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketActivitySummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketActivitySummary>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTicketActivitySummaryQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ticketActivitySummary>>
  > = ({ signal }) => ticketActivitySummary(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof ticketActivitySummary>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TicketActivitySummaryQueryResult = NonNullable<
  Awaited<ReturnType<typeof ticketActivitySummary>>
>;
export type TicketActivitySummaryQueryError = ErrorType<unknown>;

export function useTicketActivitySummary<
  TData = Awaited<ReturnType<typeof ticketActivitySummary>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetTicketActivitySummaryParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketActivitySummary>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketActivitySummary>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketActivitySummary<
  TData = Awaited<ReturnType<typeof ticketActivitySummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketActivitySummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketActivitySummary>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketActivitySummary>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketActivitySummary<
  TData = Awaited<ReturnType<typeof ticketActivitySummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketActivitySummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketActivitySummary>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Ticket activity summary
 */

export function useTicketActivitySummary<
  TData = Awaited<ReturnType<typeof ticketActivitySummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketActivitySummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketActivitySummary>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTicketActivitySummaryQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get a summary of ticket activity per hour for a given date range for a specific handler
 * @summary Ticket activity summary for a handler
 */
export const ticketActivitySummaryForHandler = (
  claimantId: number,
  params?: GetTicketActivitySummaryForHandlerParams,
  signal?: AbortSignal,
) => {
  return makeRequest<TicketActivityPoint[]>({
    url: `/tickets/metrics/activity/summary/handler/${encodeURIComponent(String(claimantId))}`,
    method: 'GET',
    params,
    signal,
  });
};

export const getTicketActivitySummaryForHandlerQueryKey = (
  claimantId: number,
  params?: GetTicketActivitySummaryForHandlerParams,
) => {
  return [
    `/tickets/metrics/activity/summary/handler/${claimantId}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getTicketActivitySummaryForHandlerQueryOptions = <
  TData = Awaited<ReturnType<typeof ticketActivitySummaryForHandler>>,
  TError = ErrorType<unknown>,
>(
  claimantId: number,
  params?: GetTicketActivitySummaryForHandlerParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketActivitySummaryForHandler>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getTicketActivitySummaryForHandlerQueryKey(claimantId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ticketActivitySummaryForHandler>>
  > = ({ signal }) =>
    ticketActivitySummaryForHandler(claimantId, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!claimantId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof ticketActivitySummaryForHandler>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TicketActivitySummaryForHandlerQueryResult = NonNullable<
  Awaited<ReturnType<typeof ticketActivitySummaryForHandler>>
>;
export type TicketActivitySummaryForHandlerQueryError = ErrorType<unknown>;

export function useTicketActivitySummaryForHandler<
  TData = Awaited<ReturnType<typeof ticketActivitySummaryForHandler>>,
  TError = ErrorType<unknown>,
>(
  claimantId: number,
  params: undefined | GetTicketActivitySummaryForHandlerParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketActivitySummaryForHandler>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketActivitySummaryForHandler>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketActivitySummaryForHandler<
  TData = Awaited<ReturnType<typeof ticketActivitySummaryForHandler>>,
  TError = ErrorType<unknown>,
>(
  claimantId: number,
  params?: GetTicketActivitySummaryForHandlerParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketActivitySummaryForHandler>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketActivitySummaryForHandler>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketActivitySummaryForHandler<
  TData = Awaited<ReturnType<typeof ticketActivitySummaryForHandler>>,
  TError = ErrorType<unknown>,
>(
  claimantId: number,
  params?: GetTicketActivitySummaryForHandlerParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketActivitySummaryForHandler>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Ticket activity summary for a handler
 */

export function useTicketActivitySummaryForHandler<
  TData = Awaited<ReturnType<typeof ticketActivitySummaryForHandler>>,
  TError = ErrorType<unknown>,
>(
  claimantId: number,
  params?: GetTicketActivitySummaryForHandlerParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketActivitySummaryForHandler>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTicketActivitySummaryForHandlerQueryOptions(
    claimantId,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get a time series of ticket ages for a given date range
 * @summary Ticket age series
 */
export const ticketAgeSeries = (
  params?: GetTicketAgeSeriesParams,
  signal?: AbortSignal,
) => {
  return makeRequest<TicketAgeSeriesPoint[]>({
    url: `/tickets/metrics/age/series`,
    method: 'GET',
    params,
    signal,
  });
};

export const getTicketAgeSeriesQueryKey = (
  params?: GetTicketAgeSeriesParams,
) => {
  return [`/tickets/metrics/age/series`, ...(params ? [params] : [])] as const;
};

export const getTicketAgeSeriesQueryOptions = <
  TData = Awaited<ReturnType<typeof ticketAgeSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketAgeSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketAgeSeries>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getTicketAgeSeriesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof ticketAgeSeries>>> = ({
    signal,
  }) => ticketAgeSeries(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof ticketAgeSeries>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TicketAgeSeriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof ticketAgeSeries>>
>;
export type TicketAgeSeriesQueryError = ErrorType<unknown>;

export function useTicketAgeSeries<
  TData = Awaited<ReturnType<typeof ticketAgeSeries>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetTicketAgeSeriesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketAgeSeries>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketAgeSeries>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketAgeSeries<
  TData = Awaited<ReturnType<typeof ticketAgeSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketAgeSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketAgeSeries>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketAgeSeries>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketAgeSeries<
  TData = Awaited<ReturnType<typeof ticketAgeSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketAgeSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketAgeSeries>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Ticket age series
 */

export function useTicketAgeSeries<
  TData = Awaited<ReturnType<typeof ticketAgeSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketAgeSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketAgeSeries>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTicketAgeSeriesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get a summary of ticket ages for a given date range
 * @summary Ticket age summary
 */
export const ticketAgeSummary = (
  params?: GetTicketAgeSummaryParams,
  signal?: AbortSignal,
) => {
  return makeRequest<TicketAgeSummary>({
    url: `/tickets/metrics/age/summary`,
    method: 'GET',
    params,
    signal,
  });
};

export const getTicketAgeSummaryQueryKey = (
  params?: GetTicketAgeSummaryParams,
) => {
  return [`/tickets/metrics/age/summary`, ...(params ? [params] : [])] as const;
};

export const getTicketAgeSummaryQueryOptions = <
  TData = Awaited<ReturnType<typeof ticketAgeSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketAgeSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketAgeSummary>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTicketAgeSummaryQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ticketAgeSummary>>
  > = ({ signal }) => ticketAgeSummary(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof ticketAgeSummary>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TicketAgeSummaryQueryResult = NonNullable<
  Awaited<ReturnType<typeof ticketAgeSummary>>
>;
export type TicketAgeSummaryQueryError = ErrorType<unknown>;

export function useTicketAgeSummary<
  TData = Awaited<ReturnType<typeof ticketAgeSummary>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetTicketAgeSummaryParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketAgeSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketAgeSummary>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketAgeSummary<
  TData = Awaited<ReturnType<typeof ticketAgeSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketAgeSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketAgeSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketAgeSummary>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketAgeSummary<
  TData = Awaited<ReturnType<typeof ticketAgeSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketAgeSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketAgeSummary>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Ticket age summary
 */

export function useTicketAgeSummary<
  TData = Awaited<ReturnType<typeof ticketAgeSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketAgeSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketAgeSummary>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTicketAgeSummaryQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get a summary of the top 20 ticket handlers (claimed and handled tickets) for a given date range
 * @summary Handler summary
 */
export const handlerSummary = (
  params?: GetHandlerSummaryParams,
  signal?: AbortSignal,
) => {
  return makeRequest<TicketHandlerSummary[]>({
    url: `/tickets/metrics/handler/summary`,
    method: 'GET',
    params,
    signal,
  });
};

export const getHandlerSummaryQueryKey = (params?: GetHandlerSummaryParams) => {
  return [
    `/tickets/metrics/handler/summary`,
    ...(params ? [params] : []),
  ] as const;
};

export const getHandlerSummaryInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof handlerSummary>>,
    GetHandlerSummaryParams['page']
  >,
  TError = ErrorType<unknown>,
>(
  params?: GetHandlerSummaryParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof handlerSummary>>,
        TError,
        TData,
        Awaited<ReturnType<typeof handlerSummary>>,
        QueryKey,
        GetHandlerSummaryParams['page']
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getHandlerSummaryQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof handlerSummary>>,
    QueryKey,
    GetHandlerSummaryParams['page']
  > = ({ signal, pageParam }) =>
    handlerSummary({ ...params, page: pageParam || params?.['page'] }, signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof handlerSummary>>,
    TError,
    TData,
    Awaited<ReturnType<typeof handlerSummary>>,
    QueryKey,
    GetHandlerSummaryParams['page']
  > & { queryKey: QueryKey };
};

export type HandlerSummaryInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof handlerSummary>>
>;
export type HandlerSummaryInfiniteQueryError = ErrorType<unknown>;

export function useHandlerSummaryInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof handlerSummary>>,
    GetHandlerSummaryParams['page']
  >,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetHandlerSummaryParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof handlerSummary>>,
        TError,
        TData,
        Awaited<ReturnType<typeof handlerSummary>>,
        QueryKey,
        GetHandlerSummaryParams['page']
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof handlerSummary>>,
          TError,
          TData,
          QueryKey
        >,
        'initialData'
      >;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };
export function useHandlerSummaryInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof handlerSummary>>,
    GetHandlerSummaryParams['page']
  >,
  TError = ErrorType<unknown>,
>(
  params?: GetHandlerSummaryParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof handlerSummary>>,
        TError,
        TData,
        Awaited<ReturnType<typeof handlerSummary>>,
        QueryKey,
        GetHandlerSummaryParams['page']
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof handlerSummary>>,
          TError,
          TData,
          QueryKey
        >,
        'initialData'
      >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };
export function useHandlerSummaryInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof handlerSummary>>,
    GetHandlerSummaryParams['page']
  >,
  TError = ErrorType<unknown>,
>(
  params?: GetHandlerSummaryParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof handlerSummary>>,
        TError,
        TData,
        Awaited<ReturnType<typeof handlerSummary>>,
        QueryKey,
        GetHandlerSummaryParams['page']
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Handler summary
 */

export function useHandlerSummaryInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof handlerSummary>>,
    GetHandlerSummaryParams['page']
  >,
  TError = ErrorType<unknown>,
>(
  params?: GetHandlerSummaryParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof handlerSummary>>,
        TError,
        TData,
        Awaited<ReturnType<typeof handlerSummary>>,
        QueryKey,
        GetHandlerSummaryParams['page']
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getHandlerSummaryInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getHandlerSummaryQueryOptions = <
  TData = Awaited<ReturnType<typeof handlerSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetHandlerSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof handlerSummary>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getHandlerSummaryQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof handlerSummary>>> = ({
    signal,
  }) => handlerSummary(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof handlerSummary>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type HandlerSummaryQueryResult = NonNullable<
  Awaited<ReturnType<typeof handlerSummary>>
>;
export type HandlerSummaryQueryError = ErrorType<unknown>;

export function useHandlerSummary<
  TData = Awaited<ReturnType<typeof handlerSummary>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetHandlerSummaryParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof handlerSummary>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof handlerSummary>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useHandlerSummary<
  TData = Awaited<ReturnType<typeof handlerSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetHandlerSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof handlerSummary>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof handlerSummary>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useHandlerSummary<
  TData = Awaited<ReturnType<typeof handlerSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetHandlerSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof handlerSummary>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Handler summary
 */

export function useHandlerSummary<
  TData = Awaited<ReturnType<typeof handlerSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetHandlerSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof handlerSummary>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getHandlerSummaryQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get a summary of the top 20 reporters (submitted tickets) for a given date range
 * @summary Reporter summary
 */
export const reporterSummary = (
  params?: GetReporterSummaryParams,
  signal?: AbortSignal,
) => {
  return makeRequest<TicketReporterSummary[]>({
    url: `/tickets/metrics/reporter/summary`,
    method: 'GET',
    params,
    signal,
  });
};

export const getReporterSummaryQueryKey = (
  params?: GetReporterSummaryParams,
) => {
  return [
    `/tickets/metrics/reporter/summary`,
    ...(params ? [params] : []),
  ] as const;
};

export const getReporterSummaryInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof reporterSummary>>,
    GetReporterSummaryParams['page']
  >,
  TError = ErrorType<unknown>,
>(
  params?: GetReporterSummaryParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof reporterSummary>>,
        TError,
        TData,
        Awaited<ReturnType<typeof reporterSummary>>,
        QueryKey,
        GetReporterSummaryParams['page']
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getReporterSummaryQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof reporterSummary>>,
    QueryKey,
    GetReporterSummaryParams['page']
  > = ({ signal, pageParam }) =>
    reporterSummary({ ...params, page: pageParam || params?.['page'] }, signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof reporterSummary>>,
    TError,
    TData,
    Awaited<ReturnType<typeof reporterSummary>>,
    QueryKey,
    GetReporterSummaryParams['page']
  > & { queryKey: QueryKey };
};

export type ReporterSummaryInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof reporterSummary>>
>;
export type ReporterSummaryInfiniteQueryError = ErrorType<unknown>;

export function useReporterSummaryInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof reporterSummary>>,
    GetReporterSummaryParams['page']
  >,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetReporterSummaryParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof reporterSummary>>,
        TError,
        TData,
        Awaited<ReturnType<typeof reporterSummary>>,
        QueryKey,
        GetReporterSummaryParams['page']
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof reporterSummary>>,
          TError,
          TData,
          QueryKey
        >,
        'initialData'
      >;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };
export function useReporterSummaryInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof reporterSummary>>,
    GetReporterSummaryParams['page']
  >,
  TError = ErrorType<unknown>,
>(
  params?: GetReporterSummaryParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof reporterSummary>>,
        TError,
        TData,
        Awaited<ReturnType<typeof reporterSummary>>,
        QueryKey,
        GetReporterSummaryParams['page']
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof reporterSummary>>,
          TError,
          TData,
          QueryKey
        >,
        'initialData'
      >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };
export function useReporterSummaryInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof reporterSummary>>,
    GetReporterSummaryParams['page']
  >,
  TError = ErrorType<unknown>,
>(
  params?: GetReporterSummaryParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof reporterSummary>>,
        TError,
        TData,
        Awaited<ReturnType<typeof reporterSummary>>,
        QueryKey,
        GetReporterSummaryParams['page']
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Reporter summary
 */

export function useReporterSummaryInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof reporterSummary>>,
    GetReporterSummaryParams['page']
  >,
  TError = ErrorType<unknown>,
>(
  params?: GetReporterSummaryParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof reporterSummary>>,
        TError,
        TData,
        Awaited<ReturnType<typeof reporterSummary>>,
        QueryKey,
        GetReporterSummaryParams['page']
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getReporterSummaryInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getReporterSummaryQueryOptions = <
  TData = Awaited<ReturnType<typeof reporterSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetReporterSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof reporterSummary>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getReporterSummaryQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof reporterSummary>>> = ({
    signal,
  }) => reporterSummary(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof reporterSummary>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ReporterSummaryQueryResult = NonNullable<
  Awaited<ReturnType<typeof reporterSummary>>
>;
export type ReporterSummaryQueryError = ErrorType<unknown>;

export function useReporterSummary<
  TData = Awaited<ReturnType<typeof reporterSummary>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetReporterSummaryParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof reporterSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof reporterSummary>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useReporterSummary<
  TData = Awaited<ReturnType<typeof reporterSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetReporterSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof reporterSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof reporterSummary>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useReporterSummary<
  TData = Awaited<ReturnType<typeof reporterSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetReporterSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof reporterSummary>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Reporter summary
 */

export function useReporterSummary<
  TData = Awaited<ReturnType<typeof reporterSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetReporterSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof reporterSummary>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getReporterSummaryQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
