/**
 * Generated by orval v7.0.1 🍺
 * Do not edit manually.
 * e621 API
 * An API for accessing user information and other resources on e621 and e926.
 * OpenAPI spec version: 1.0.0
 */
import type {
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { useInfiniteQuery, useQuery } from "@tanstack/react-query";

import type { ErrorType } from "../http/axios";
import { makeRequest } from "../http/axios";
import type { GetTicketsParams, Ticket } from "./model";

/**
 * Returns a list of tickets based on search criteria.
 * @summary Get a list of tickets
 */
export const tickets = (params?: GetTicketsParams, signal?: AbortSignal) => {
  return makeRequest<Ticket[]>({
    url: `/tickets.json`,
    method: "GET",
    params,
    signal,
  });
};

export const getTicketsQueryKey = (params?: GetTicketsParams) => {
  return [`/tickets.json`, ...(params ? [params] : [])] as const;
};

export const getTicketsInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof tickets>>,
    GetTicketsParams["page"]
  >,
  TError = ErrorType<void>,
>(
  params?: GetTicketsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof tickets>>,
        TError,
        TData,
        Awaited<ReturnType<typeof tickets>>,
        QueryKey,
        GetTicketsParams["page"]
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getTicketsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof tickets>>,
    QueryKey,
    GetTicketsParams["page"]
  > = ({ signal, pageParam }) =>
    tickets({ ...params, page: pageParam || params?.["page"] }, signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof tickets>>,
    TError,
    TData,
    Awaited<ReturnType<typeof tickets>>,
    QueryKey,
    GetTicketsParams["page"]
  > & { queryKey: QueryKey };
};

export type TicketsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof tickets>>
>;
export type TicketsInfiniteQueryError = ErrorType<void>;

export function useTicketsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof tickets>>,
    GetTicketsParams["page"]
  >,
  TError = ErrorType<void>,
>(
  params: undefined | GetTicketsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof tickets>>,
        TError,
        TData,
        Awaited<ReturnType<typeof tickets>>,
        QueryKey,
        GetTicketsParams["page"]
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof tickets>>,
          TError,
          TData,
          QueryKey
        >,
        "initialData"
      >;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof tickets>>,
    GetTicketsParams["page"]
  >,
  TError = ErrorType<void>,
>(
  params?: GetTicketsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof tickets>>,
        TError,
        TData,
        Awaited<ReturnType<typeof tickets>>,
        QueryKey,
        GetTicketsParams["page"]
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof tickets>>,
          TError,
          TData,
          QueryKey
        >,
        "initialData"
      >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof tickets>>,
    GetTicketsParams["page"]
  >,
  TError = ErrorType<void>,
>(
  params?: GetTicketsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof tickets>>,
        TError,
        TData,
        Awaited<ReturnType<typeof tickets>>,
        QueryKey,
        GetTicketsParams["page"]
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get a list of tickets
 */

export function useTicketsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof tickets>>,
    GetTicketsParams["page"]
  >,
  TError = ErrorType<void>,
>(
  params?: GetTicketsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof tickets>>,
        TError,
        TData,
        Awaited<ReturnType<typeof tickets>>,
        QueryKey,
        GetTicketsParams["page"]
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTicketsInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getTicketsQueryOptions = <
  TData = Awaited<ReturnType<typeof tickets>>,
  TError = ErrorType<void>,
>(
  params?: GetTicketsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof tickets>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getTicketsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof tickets>>> = ({
    signal,
  }) => tickets(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof tickets>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TicketsQueryResult = NonNullable<
  Awaited<ReturnType<typeof tickets>>
>;
export type TicketsQueryError = ErrorType<void>;

export function useTickets<
  TData = Awaited<ReturnType<typeof tickets>>,
  TError = ErrorType<void>,
>(
  params: undefined | GetTicketsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof tickets>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof tickets>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTickets<
  TData = Awaited<ReturnType<typeof tickets>>,
  TError = ErrorType<void>,
>(
  params?: GetTicketsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof tickets>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof tickets>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTickets<
  TData = Awaited<ReturnType<typeof tickets>>,
  TError = ErrorType<void>,
>(
  params?: GetTicketsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof tickets>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get a list of tickets
 */

export function useTickets<
  TData = Awaited<ReturnType<typeof tickets>>,
  TError = ErrorType<void>,
>(
  params?: GetTicketsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof tickets>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTicketsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Returns detailed information about a specific ticket identified by its ID.
 * @summary Get a ticket by ID
 */
export const ticket = (id: number, signal?: AbortSignal) => {
  return makeRequest<Ticket>({
    url: `/tickets/${encodeURIComponent(String(id))}.json`,
    method: "GET",
    signal,
  });
};

export const getTicketQueryKey = (id: number) => {
  return [`/tickets/${id}.json`] as const;
};

export const getTicketQueryOptions = <
  TData = Awaited<ReturnType<typeof ticket>>,
  TError = ErrorType<void>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof ticket>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getTicketQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof ticket>>> = ({
    signal,
  }) => ticket(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof ticket>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type TicketQueryResult = NonNullable<Awaited<ReturnType<typeof ticket>>>;
export type TicketQueryError = ErrorType<void>;

export function useTicket<
  TData = Awaited<ReturnType<typeof ticket>>,
  TError = ErrorType<void>,
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof ticket>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticket>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicket<
  TData = Awaited<ReturnType<typeof ticket>>,
  TError = ErrorType<void>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof ticket>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticket>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicket<
  TData = Awaited<ReturnType<typeof ticket>>,
  TError = ErrorType<void>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof ticket>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get a ticket by ID
 */

export function useTicket<
  TData = Awaited<ReturnType<typeof ticket>>,
  TError = ErrorType<void>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof ticket>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTicketQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
