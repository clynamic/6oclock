/**
 * Generated by orval v7.0.1 🍺
 * Do not edit manually.
 * 5-thirty
 * backend data aggregate for 6 o'clock
 * OpenAPI spec version: 0.0.5
 */
import { useInfiniteQuery, useQuery } from '@tanstack/react-query';
import type {
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import type {
  GetTicketActivitySummaryByHandlerParams,
  GetTicketActivitySummaryParams,
  GetTicketAgeSeriesParams,
  GetTicketAgeSummaryParams,
  GetTicketClosedSeriesByHandlerParams,
  GetTicketClosedSeriesParams,
  GetTicketCreatedSeriesByReporterParams,
  GetTicketCreatedSeriesParams,
  GetTicketHandlerSummaryParams,
  GetTicketOpenSeriesParams,
  GetTicketReporterSummaryParams,
  GetTicketStatusSummaryParams,
  GetTicketTypeSummaryByHandlerParams,
  GetTicketTypeSummaryParams,
  SeriesCountPoint,
  TicketAgeSeriesPoint,
  TicketAgeSummary,
  TicketHandlerSummary,
  TicketReporterSummary,
  TicketStatusSummary,
  TicketTypeSummary,
} from './model';
import { makeRequest } from '../http/axios';
import type { ErrorType } from '../http/axios';

/**
 * Get ticket status (pending, approved, partial) counts for a given date range
 * @summary Ticket status summary
 */
export const ticketStatusSummary = (
  params?: GetTicketStatusSummaryParams,
  signal?: AbortSignal,
) => {
  return makeRequest<TicketStatusSummary>({
    url: `/metrics/tickets/status/summary`,
    method: 'GET',
    params,
    signal,
  });
};

export const getTicketStatusSummaryQueryKey = (
  params?: GetTicketStatusSummaryParams,
) => {
  return [
    `/metrics/tickets/status/summary`,
    ...(params ? [params] : []),
  ] as const;
};

export const getTicketStatusSummaryQueryOptions = <
  TData = Awaited<ReturnType<typeof ticketStatusSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketStatusSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketStatusSummary>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTicketStatusSummaryQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ticketStatusSummary>>
  > = ({ signal }) => ticketStatusSummary(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof ticketStatusSummary>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TicketStatusSummaryQueryResult = NonNullable<
  Awaited<ReturnType<typeof ticketStatusSummary>>
>;
export type TicketStatusSummaryQueryError = ErrorType<unknown>;

export function useTicketStatusSummary<
  TData = Awaited<ReturnType<typeof ticketStatusSummary>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetTicketStatusSummaryParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketStatusSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketStatusSummary>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketStatusSummary<
  TData = Awaited<ReturnType<typeof ticketStatusSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketStatusSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketStatusSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketStatusSummary>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketStatusSummary<
  TData = Awaited<ReturnType<typeof ticketStatusSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketStatusSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketStatusSummary>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Ticket status summary
 */

export function useTicketStatusSummary<
  TData = Awaited<ReturnType<typeof ticketStatusSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketStatusSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketStatusSummary>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTicketStatusSummaryQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get ticket types counts for a given date range
 * @summary Ticket type summary
 */
export const ticketTypeSummary = (
  params?: GetTicketTypeSummaryParams,
  signal?: AbortSignal,
) => {
  return makeRequest<TicketTypeSummary>({
    url: `/metrics/tickets/type/summary`,
    method: 'GET',
    params,
    signal,
  });
};

export const getTicketTypeSummaryQueryKey = (
  params?: GetTicketTypeSummaryParams,
) => {
  return [
    `/metrics/tickets/type/summary`,
    ...(params ? [params] : []),
  ] as const;
};

export const getTicketTypeSummaryQueryOptions = <
  TData = Awaited<ReturnType<typeof ticketTypeSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketTypeSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketTypeSummary>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTicketTypeSummaryQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ticketTypeSummary>>
  > = ({ signal }) => ticketTypeSummary(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof ticketTypeSummary>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TicketTypeSummaryQueryResult = NonNullable<
  Awaited<ReturnType<typeof ticketTypeSummary>>
>;
export type TicketTypeSummaryQueryError = ErrorType<unknown>;

export function useTicketTypeSummary<
  TData = Awaited<ReturnType<typeof ticketTypeSummary>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetTicketTypeSummaryParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketTypeSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketTypeSummary>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketTypeSummary<
  TData = Awaited<ReturnType<typeof ticketTypeSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketTypeSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketTypeSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketTypeSummary>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketTypeSummary<
  TData = Awaited<ReturnType<typeof ticketTypeSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketTypeSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketTypeSummary>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Ticket type summary
 */

export function useTicketTypeSummary<
  TData = Awaited<ReturnType<typeof ticketTypeSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketTypeSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketTypeSummary>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTicketTypeSummaryQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get ticket types counts for a given date range for a specific handler
 * @summary Ticket type summary for a handler
 */
export const ticketTypeSummaryByHandler = (
  claimantId: number,
  params?: GetTicketTypeSummaryByHandlerParams,
  signal?: AbortSignal,
) => {
  return makeRequest<TicketTypeSummary>({
    url: `/metrics/tickets/type/summary/by/handler/${encodeURIComponent(String(claimantId))}`,
    method: 'GET',
    params,
    signal,
  });
};

export const getTicketTypeSummaryByHandlerQueryKey = (
  claimantId: number,
  params?: GetTicketTypeSummaryByHandlerParams,
) => {
  return [
    `/metrics/tickets/type/summary/by/handler/${claimantId}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getTicketTypeSummaryByHandlerQueryOptions = <
  TData = Awaited<ReturnType<typeof ticketTypeSummaryByHandler>>,
  TError = ErrorType<unknown>,
>(
  claimantId: number,
  params?: GetTicketTypeSummaryByHandlerParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketTypeSummaryByHandler>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getTicketTypeSummaryByHandlerQueryKey(claimantId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ticketTypeSummaryByHandler>>
  > = ({ signal }) => ticketTypeSummaryByHandler(claimantId, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!claimantId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof ticketTypeSummaryByHandler>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TicketTypeSummaryByHandlerQueryResult = NonNullable<
  Awaited<ReturnType<typeof ticketTypeSummaryByHandler>>
>;
export type TicketTypeSummaryByHandlerQueryError = ErrorType<unknown>;

export function useTicketTypeSummaryByHandler<
  TData = Awaited<ReturnType<typeof ticketTypeSummaryByHandler>>,
  TError = ErrorType<unknown>,
>(
  claimantId: number,
  params: undefined | GetTicketTypeSummaryByHandlerParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketTypeSummaryByHandler>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketTypeSummaryByHandler>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketTypeSummaryByHandler<
  TData = Awaited<ReturnType<typeof ticketTypeSummaryByHandler>>,
  TError = ErrorType<unknown>,
>(
  claimantId: number,
  params?: GetTicketTypeSummaryByHandlerParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketTypeSummaryByHandler>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketTypeSummaryByHandler>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketTypeSummaryByHandler<
  TData = Awaited<ReturnType<typeof ticketTypeSummaryByHandler>>,
  TError = ErrorType<unknown>,
>(
  claimantId: number,
  params?: GetTicketTypeSummaryByHandlerParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketTypeSummaryByHandler>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Ticket type summary for a handler
 */

export function useTicketTypeSummaryByHandler<
  TData = Awaited<ReturnType<typeof ticketTypeSummaryByHandler>>,
  TError = ErrorType<unknown>,
>(
  claimantId: number,
  params?: GetTicketTypeSummaryByHandlerParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketTypeSummaryByHandler>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTicketTypeSummaryByHandlerQueryOptions(
    claimantId,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get a time series of open tickets for a given date range
 * @summary Ticket open series
 */
export const ticketOpenSeries = (
  params?: GetTicketOpenSeriesParams,
  signal?: AbortSignal,
) => {
  return makeRequest<SeriesCountPoint[]>({
    url: `/metrics/tickets/open/series`,
    method: 'GET',
    params,
    signal,
  });
};

export const getTicketOpenSeriesQueryKey = (
  params?: GetTicketOpenSeriesParams,
) => {
  return [`/metrics/tickets/open/series`, ...(params ? [params] : [])] as const;
};

export const getTicketOpenSeriesQueryOptions = <
  TData = Awaited<ReturnType<typeof ticketOpenSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketOpenSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketOpenSeries>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTicketOpenSeriesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ticketOpenSeries>>
  > = ({ signal }) => ticketOpenSeries(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof ticketOpenSeries>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TicketOpenSeriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof ticketOpenSeries>>
>;
export type TicketOpenSeriesQueryError = ErrorType<unknown>;

export function useTicketOpenSeries<
  TData = Awaited<ReturnType<typeof ticketOpenSeries>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetTicketOpenSeriesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketOpenSeries>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketOpenSeries>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketOpenSeries<
  TData = Awaited<ReturnType<typeof ticketOpenSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketOpenSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketOpenSeries>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketOpenSeries>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketOpenSeries<
  TData = Awaited<ReturnType<typeof ticketOpenSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketOpenSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketOpenSeries>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Ticket open series
 */

export function useTicketOpenSeries<
  TData = Awaited<ReturnType<typeof ticketOpenSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketOpenSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketOpenSeries>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTicketOpenSeriesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get a time series of created tickets for a given date range
 * @summary Ticket created series
 */
export const ticketCreatedSeries = (
  params?: GetTicketCreatedSeriesParams,
  signal?: AbortSignal,
) => {
  return makeRequest<SeriesCountPoint[]>({
    url: `/metrics/tickets/created/series`,
    method: 'GET',
    params,
    signal,
  });
};

export const getTicketCreatedSeriesQueryKey = (
  params?: GetTicketCreatedSeriesParams,
) => {
  return [
    `/metrics/tickets/created/series`,
    ...(params ? [params] : []),
  ] as const;
};

export const getTicketCreatedSeriesQueryOptions = <
  TData = Awaited<ReturnType<typeof ticketCreatedSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketCreatedSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketCreatedSeries>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTicketCreatedSeriesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ticketCreatedSeries>>
  > = ({ signal }) => ticketCreatedSeries(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof ticketCreatedSeries>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TicketCreatedSeriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof ticketCreatedSeries>>
>;
export type TicketCreatedSeriesQueryError = ErrorType<unknown>;

export function useTicketCreatedSeries<
  TData = Awaited<ReturnType<typeof ticketCreatedSeries>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetTicketCreatedSeriesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketCreatedSeries>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketCreatedSeries>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketCreatedSeries<
  TData = Awaited<ReturnType<typeof ticketCreatedSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketCreatedSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketCreatedSeries>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketCreatedSeries>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketCreatedSeries<
  TData = Awaited<ReturnType<typeof ticketCreatedSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketCreatedSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketCreatedSeries>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Ticket created series
 */

export function useTicketCreatedSeries<
  TData = Awaited<ReturnType<typeof ticketCreatedSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketCreatedSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketCreatedSeries>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTicketCreatedSeriesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get a time series of created tickets for a given date range for a specific reporter
 * @summary Ticket created series by reporter
 */
export const ticketCreatedSeriesByReporter = (
  repoterId: number,
  params?: GetTicketCreatedSeriesByReporterParams,
  signal?: AbortSignal,
) => {
  return makeRequest<SeriesCountPoint[]>({
    url: `/metrics/tickets/created/series/by/reporter/${encodeURIComponent(String(repoterId))}`,
    method: 'GET',
    params,
    signal,
  });
};

export const getTicketCreatedSeriesByReporterQueryKey = (
  repoterId: number,
  params?: GetTicketCreatedSeriesByReporterParams,
) => {
  return [
    `/metrics/tickets/created/series/by/reporter/${repoterId}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getTicketCreatedSeriesByReporterQueryOptions = <
  TData = Awaited<ReturnType<typeof ticketCreatedSeriesByReporter>>,
  TError = ErrorType<unknown>,
>(
  repoterId: number,
  params?: GetTicketCreatedSeriesByReporterParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketCreatedSeriesByReporter>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getTicketCreatedSeriesByReporterQueryKey(repoterId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ticketCreatedSeriesByReporter>>
  > = ({ signal }) => ticketCreatedSeriesByReporter(repoterId, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!repoterId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof ticketCreatedSeriesByReporter>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TicketCreatedSeriesByReporterQueryResult = NonNullable<
  Awaited<ReturnType<typeof ticketCreatedSeriesByReporter>>
>;
export type TicketCreatedSeriesByReporterQueryError = ErrorType<unknown>;

export function useTicketCreatedSeriesByReporter<
  TData = Awaited<ReturnType<typeof ticketCreatedSeriesByReporter>>,
  TError = ErrorType<unknown>,
>(
  repoterId: number,
  params: undefined | GetTicketCreatedSeriesByReporterParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketCreatedSeriesByReporter>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketCreatedSeriesByReporter>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketCreatedSeriesByReporter<
  TData = Awaited<ReturnType<typeof ticketCreatedSeriesByReporter>>,
  TError = ErrorType<unknown>,
>(
  repoterId: number,
  params?: GetTicketCreatedSeriesByReporterParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketCreatedSeriesByReporter>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketCreatedSeriesByReporter>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketCreatedSeriesByReporter<
  TData = Awaited<ReturnType<typeof ticketCreatedSeriesByReporter>>,
  TError = ErrorType<unknown>,
>(
  repoterId: number,
  params?: GetTicketCreatedSeriesByReporterParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketCreatedSeriesByReporter>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Ticket created series by reporter
 */

export function useTicketCreatedSeriesByReporter<
  TData = Awaited<ReturnType<typeof ticketCreatedSeriesByReporter>>,
  TError = ErrorType<unknown>,
>(
  repoterId: number,
  params?: GetTicketCreatedSeriesByReporterParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketCreatedSeriesByReporter>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTicketCreatedSeriesByReporterQueryOptions(
    repoterId,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get a time series of closed tickets for a given date range
 * @summary Ticket closed series
 */
export const ticketClosedSeries = (
  params?: GetTicketClosedSeriesParams,
  signal?: AbortSignal,
) => {
  return makeRequest<SeriesCountPoint[]>({
    url: `/metrics/tickets/closed/series`,
    method: 'GET',
    params,
    signal,
  });
};

export const getTicketClosedSeriesQueryKey = (
  params?: GetTicketClosedSeriesParams,
) => {
  return [
    `/metrics/tickets/closed/series`,
    ...(params ? [params] : []),
  ] as const;
};

export const getTicketClosedSeriesQueryOptions = <
  TData = Awaited<ReturnType<typeof ticketClosedSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketClosedSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketClosedSeries>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTicketClosedSeriesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ticketClosedSeries>>
  > = ({ signal }) => ticketClosedSeries(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof ticketClosedSeries>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TicketClosedSeriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof ticketClosedSeries>>
>;
export type TicketClosedSeriesQueryError = ErrorType<unknown>;

export function useTicketClosedSeries<
  TData = Awaited<ReturnType<typeof ticketClosedSeries>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetTicketClosedSeriesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketClosedSeries>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketClosedSeries>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketClosedSeries<
  TData = Awaited<ReturnType<typeof ticketClosedSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketClosedSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketClosedSeries>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketClosedSeries>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketClosedSeries<
  TData = Awaited<ReturnType<typeof ticketClosedSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketClosedSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketClosedSeries>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Ticket closed series
 */

export function useTicketClosedSeries<
  TData = Awaited<ReturnType<typeof ticketClosedSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketClosedSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketClosedSeries>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTicketClosedSeriesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get a time series of closed tickets for a given date range for a specific handler
 * @summary Ticket closed series by handler
 */
export const ticketClosedSeriesByHandler = (
  handlerId: number,
  params?: GetTicketClosedSeriesByHandlerParams,
  signal?: AbortSignal,
) => {
  return makeRequest<SeriesCountPoint[]>({
    url: `/metrics/tickets/closed/series/by/handler/${encodeURIComponent(String(handlerId))}`,
    method: 'GET',
    params,
    signal,
  });
};

export const getTicketClosedSeriesByHandlerQueryKey = (
  handlerId: number,
  params?: GetTicketClosedSeriesByHandlerParams,
) => {
  return [
    `/metrics/tickets/closed/series/by/handler/${handlerId}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getTicketClosedSeriesByHandlerQueryOptions = <
  TData = Awaited<ReturnType<typeof ticketClosedSeriesByHandler>>,
  TError = ErrorType<unknown>,
>(
  handlerId: number,
  params?: GetTicketClosedSeriesByHandlerParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketClosedSeriesByHandler>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getTicketClosedSeriesByHandlerQueryKey(handlerId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ticketClosedSeriesByHandler>>
  > = ({ signal }) => ticketClosedSeriesByHandler(handlerId, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!handlerId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof ticketClosedSeriesByHandler>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TicketClosedSeriesByHandlerQueryResult = NonNullable<
  Awaited<ReturnType<typeof ticketClosedSeriesByHandler>>
>;
export type TicketClosedSeriesByHandlerQueryError = ErrorType<unknown>;

export function useTicketClosedSeriesByHandler<
  TData = Awaited<ReturnType<typeof ticketClosedSeriesByHandler>>,
  TError = ErrorType<unknown>,
>(
  handlerId: number,
  params: undefined | GetTicketClosedSeriesByHandlerParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketClosedSeriesByHandler>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketClosedSeriesByHandler>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketClosedSeriesByHandler<
  TData = Awaited<ReturnType<typeof ticketClosedSeriesByHandler>>,
  TError = ErrorType<unknown>,
>(
  handlerId: number,
  params?: GetTicketClosedSeriesByHandlerParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketClosedSeriesByHandler>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketClosedSeriesByHandler>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketClosedSeriesByHandler<
  TData = Awaited<ReturnType<typeof ticketClosedSeriesByHandler>>,
  TError = ErrorType<unknown>,
>(
  handlerId: number,
  params?: GetTicketClosedSeriesByHandlerParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketClosedSeriesByHandler>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Ticket closed series by handler
 */

export function useTicketClosedSeriesByHandler<
  TData = Awaited<ReturnType<typeof ticketClosedSeriesByHandler>>,
  TError = ErrorType<unknown>,
>(
  handlerId: number,
  params?: GetTicketClosedSeriesByHandlerParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketClosedSeriesByHandler>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTicketClosedSeriesByHandlerQueryOptions(
    handlerId,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get a hourly summary of ticket activity for a given date range
 * @summary Ticket summary series
 */
export const ticketActivitySummary = (
  params?: GetTicketActivitySummaryParams,
  signal?: AbortSignal,
) => {
  return makeRequest<SeriesCountPoint[]>({
    url: `/metrics/tickets/activity/summary`,
    method: 'GET',
    params,
    signal,
  });
};

export const getTicketActivitySummaryQueryKey = (
  params?: GetTicketActivitySummaryParams,
) => {
  return [
    `/metrics/tickets/activity/summary`,
    ...(params ? [params] : []),
  ] as const;
};

export const getTicketActivitySummaryQueryOptions = <
  TData = Awaited<ReturnType<typeof ticketActivitySummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketActivitySummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketActivitySummary>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTicketActivitySummaryQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ticketActivitySummary>>
  > = ({ signal }) => ticketActivitySummary(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof ticketActivitySummary>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TicketActivitySummaryQueryResult = NonNullable<
  Awaited<ReturnType<typeof ticketActivitySummary>>
>;
export type TicketActivitySummaryQueryError = ErrorType<unknown>;

export function useTicketActivitySummary<
  TData = Awaited<ReturnType<typeof ticketActivitySummary>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetTicketActivitySummaryParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketActivitySummary>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketActivitySummary>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketActivitySummary<
  TData = Awaited<ReturnType<typeof ticketActivitySummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketActivitySummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketActivitySummary>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketActivitySummary>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketActivitySummary<
  TData = Awaited<ReturnType<typeof ticketActivitySummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketActivitySummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketActivitySummary>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Ticket summary series
 */

export function useTicketActivitySummary<
  TData = Awaited<ReturnType<typeof ticketActivitySummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketActivitySummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketActivitySummary>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTicketActivitySummaryQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get a hourly summary of ticket activity for a given date range for a specific handler
 * @summary Ticket activity summary by handler
 */
export const ticketActivitySummaryByHandler = (
  claimantId: number,
  params?: GetTicketActivitySummaryByHandlerParams,
  signal?: AbortSignal,
) => {
  return makeRequest<SeriesCountPoint[]>({
    url: `/metrics/tickets/activity/summary/by/handler/${encodeURIComponent(String(claimantId))}`,
    method: 'GET',
    params,
    signal,
  });
};

export const getTicketActivitySummaryByHandlerQueryKey = (
  claimantId: number,
  params?: GetTicketActivitySummaryByHandlerParams,
) => {
  return [
    `/metrics/tickets/activity/summary/by/handler/${claimantId}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getTicketActivitySummaryByHandlerQueryOptions = <
  TData = Awaited<ReturnType<typeof ticketActivitySummaryByHandler>>,
  TError = ErrorType<unknown>,
>(
  claimantId: number,
  params?: GetTicketActivitySummaryByHandlerParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketActivitySummaryByHandler>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getTicketActivitySummaryByHandlerQueryKey(claimantId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ticketActivitySummaryByHandler>>
  > = ({ signal }) =>
    ticketActivitySummaryByHandler(claimantId, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!claimantId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof ticketActivitySummaryByHandler>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TicketActivitySummaryByHandlerQueryResult = NonNullable<
  Awaited<ReturnType<typeof ticketActivitySummaryByHandler>>
>;
export type TicketActivitySummaryByHandlerQueryError = ErrorType<unknown>;

export function useTicketActivitySummaryByHandler<
  TData = Awaited<ReturnType<typeof ticketActivitySummaryByHandler>>,
  TError = ErrorType<unknown>,
>(
  claimantId: number,
  params: undefined | GetTicketActivitySummaryByHandlerParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketActivitySummaryByHandler>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketActivitySummaryByHandler>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketActivitySummaryByHandler<
  TData = Awaited<ReturnType<typeof ticketActivitySummaryByHandler>>,
  TError = ErrorType<unknown>,
>(
  claimantId: number,
  params?: GetTicketActivitySummaryByHandlerParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketActivitySummaryByHandler>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketActivitySummaryByHandler>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketActivitySummaryByHandler<
  TData = Awaited<ReturnType<typeof ticketActivitySummaryByHandler>>,
  TError = ErrorType<unknown>,
>(
  claimantId: number,
  params?: GetTicketActivitySummaryByHandlerParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketActivitySummaryByHandler>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Ticket activity summary by handler
 */

export function useTicketActivitySummaryByHandler<
  TData = Awaited<ReturnType<typeof ticketActivitySummaryByHandler>>,
  TError = ErrorType<unknown>,
>(
  claimantId: number,
  params?: GetTicketActivitySummaryByHandlerParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketActivitySummaryByHandler>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTicketActivitySummaryByHandlerQueryOptions(
    claimantId,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get a time series of ticket ages for a given date range
 * @summary Ticket age series
 */
export const ticketAgeSeries = (
  params?: GetTicketAgeSeriesParams,
  signal?: AbortSignal,
) => {
  return makeRequest<TicketAgeSeriesPoint[]>({
    url: `/metrics/tickets/age/series`,
    method: 'GET',
    params,
    signal,
  });
};

export const getTicketAgeSeriesQueryKey = (
  params?: GetTicketAgeSeriesParams,
) => {
  return [`/metrics/tickets/age/series`, ...(params ? [params] : [])] as const;
};

export const getTicketAgeSeriesQueryOptions = <
  TData = Awaited<ReturnType<typeof ticketAgeSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketAgeSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketAgeSeries>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getTicketAgeSeriesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof ticketAgeSeries>>> = ({
    signal,
  }) => ticketAgeSeries(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof ticketAgeSeries>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TicketAgeSeriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof ticketAgeSeries>>
>;
export type TicketAgeSeriesQueryError = ErrorType<unknown>;

export function useTicketAgeSeries<
  TData = Awaited<ReturnType<typeof ticketAgeSeries>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetTicketAgeSeriesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketAgeSeries>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketAgeSeries>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketAgeSeries<
  TData = Awaited<ReturnType<typeof ticketAgeSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketAgeSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketAgeSeries>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketAgeSeries>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketAgeSeries<
  TData = Awaited<ReturnType<typeof ticketAgeSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketAgeSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketAgeSeries>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Ticket age series
 */

export function useTicketAgeSeries<
  TData = Awaited<ReturnType<typeof ticketAgeSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketAgeSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketAgeSeries>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTicketAgeSeriesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get a summary of ticket ages for a given date range
 * @summary Ticket age summary
 */
export const ticketAgeSummary = (
  params?: GetTicketAgeSummaryParams,
  signal?: AbortSignal,
) => {
  return makeRequest<TicketAgeSummary>({
    url: `/metrics/tickets/age/summary`,
    method: 'GET',
    params,
    signal,
  });
};

export const getTicketAgeSummaryQueryKey = (
  params?: GetTicketAgeSummaryParams,
) => {
  return [`/metrics/tickets/age/summary`, ...(params ? [params] : [])] as const;
};

export const getTicketAgeSummaryQueryOptions = <
  TData = Awaited<ReturnType<typeof ticketAgeSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketAgeSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketAgeSummary>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTicketAgeSummaryQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ticketAgeSummary>>
  > = ({ signal }) => ticketAgeSummary(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof ticketAgeSummary>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TicketAgeSummaryQueryResult = NonNullable<
  Awaited<ReturnType<typeof ticketAgeSummary>>
>;
export type TicketAgeSummaryQueryError = ErrorType<unknown>;

export function useTicketAgeSummary<
  TData = Awaited<ReturnType<typeof ticketAgeSummary>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetTicketAgeSummaryParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketAgeSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketAgeSummary>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketAgeSummary<
  TData = Awaited<ReturnType<typeof ticketAgeSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketAgeSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketAgeSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketAgeSummary>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketAgeSummary<
  TData = Awaited<ReturnType<typeof ticketAgeSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketAgeSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketAgeSummary>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Ticket age summary
 */

export function useTicketAgeSummary<
  TData = Awaited<ReturnType<typeof ticketAgeSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketAgeSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketAgeSummary>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTicketAgeSummaryQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get a summary of ticket handling counts for a given date range
 * @summary Handler summary
 */
export const ticketHandlerSummary = (
  params?: GetTicketHandlerSummaryParams,
  signal?: AbortSignal,
) => {
  return makeRequest<TicketHandlerSummary[]>({
    url: `/metrics/tickets/handler/summary`,
    method: 'GET',
    params,
    signal,
  });
};

export const getTicketHandlerSummaryQueryKey = (
  params?: GetTicketHandlerSummaryParams,
) => {
  return [
    `/metrics/tickets/handler/summary`,
    ...(params ? [params] : []),
  ] as const;
};

export const getTicketHandlerSummaryInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof ticketHandlerSummary>>,
    GetTicketHandlerSummaryParams['page']
  >,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketHandlerSummaryParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof ticketHandlerSummary>>,
        TError,
        TData,
        Awaited<ReturnType<typeof ticketHandlerSummary>>,
        QueryKey,
        GetTicketHandlerSummaryParams['page']
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTicketHandlerSummaryQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ticketHandlerSummary>>,
    QueryKey,
    GetTicketHandlerSummaryParams['page']
  > = ({ signal, pageParam }) =>
    ticketHandlerSummary(
      { ...params, page: pageParam || params?.['page'] },
      signal,
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof ticketHandlerSummary>>,
    TError,
    TData,
    Awaited<ReturnType<typeof ticketHandlerSummary>>,
    QueryKey,
    GetTicketHandlerSummaryParams['page']
  > & { queryKey: QueryKey };
};

export type TicketHandlerSummaryInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof ticketHandlerSummary>>
>;
export type TicketHandlerSummaryInfiniteQueryError = ErrorType<unknown>;

export function useTicketHandlerSummaryInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof ticketHandlerSummary>>,
    GetTicketHandlerSummaryParams['page']
  >,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetTicketHandlerSummaryParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof ticketHandlerSummary>>,
        TError,
        TData,
        Awaited<ReturnType<typeof ticketHandlerSummary>>,
        QueryKey,
        GetTicketHandlerSummaryParams['page']
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketHandlerSummary>>,
          TError,
          TData,
          QueryKey
        >,
        'initialData'
      >;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketHandlerSummaryInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof ticketHandlerSummary>>,
    GetTicketHandlerSummaryParams['page']
  >,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketHandlerSummaryParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof ticketHandlerSummary>>,
        TError,
        TData,
        Awaited<ReturnType<typeof ticketHandlerSummary>>,
        QueryKey,
        GetTicketHandlerSummaryParams['page']
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketHandlerSummary>>,
          TError,
          TData,
          QueryKey
        >,
        'initialData'
      >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketHandlerSummaryInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof ticketHandlerSummary>>,
    GetTicketHandlerSummaryParams['page']
  >,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketHandlerSummaryParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof ticketHandlerSummary>>,
        TError,
        TData,
        Awaited<ReturnType<typeof ticketHandlerSummary>>,
        QueryKey,
        GetTicketHandlerSummaryParams['page']
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Handler summary
 */

export function useTicketHandlerSummaryInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof ticketHandlerSummary>>,
    GetTicketHandlerSummaryParams['page']
  >,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketHandlerSummaryParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof ticketHandlerSummary>>,
        TError,
        TData,
        Awaited<ReturnType<typeof ticketHandlerSummary>>,
        QueryKey,
        GetTicketHandlerSummaryParams['page']
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTicketHandlerSummaryInfiniteQueryOptions(
    params,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getTicketHandlerSummaryQueryOptions = <
  TData = Awaited<ReturnType<typeof ticketHandlerSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketHandlerSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketHandlerSummary>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTicketHandlerSummaryQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ticketHandlerSummary>>
  > = ({ signal }) => ticketHandlerSummary(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof ticketHandlerSummary>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TicketHandlerSummaryQueryResult = NonNullable<
  Awaited<ReturnType<typeof ticketHandlerSummary>>
>;
export type TicketHandlerSummaryQueryError = ErrorType<unknown>;

export function useTicketHandlerSummary<
  TData = Awaited<ReturnType<typeof ticketHandlerSummary>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetTicketHandlerSummaryParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketHandlerSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketHandlerSummary>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketHandlerSummary<
  TData = Awaited<ReturnType<typeof ticketHandlerSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketHandlerSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketHandlerSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketHandlerSummary>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketHandlerSummary<
  TData = Awaited<ReturnType<typeof ticketHandlerSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketHandlerSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketHandlerSummary>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Handler summary
 */

export function useTicketHandlerSummary<
  TData = Awaited<ReturnType<typeof ticketHandlerSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketHandlerSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketHandlerSummary>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTicketHandlerSummaryQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get a summary of ticket reporting counts for a given date range
 * @summary Reporter summary
 */
export const ticketReporterSummary = (
  params?: GetTicketReporterSummaryParams,
  signal?: AbortSignal,
) => {
  return makeRequest<TicketReporterSummary[]>({
    url: `/metrics/tickets/reporter/summary`,
    method: 'GET',
    params,
    signal,
  });
};

export const getTicketReporterSummaryQueryKey = (
  params?: GetTicketReporterSummaryParams,
) => {
  return [
    `/metrics/tickets/reporter/summary`,
    ...(params ? [params] : []),
  ] as const;
};

export const getTicketReporterSummaryInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof ticketReporterSummary>>,
    GetTicketReporterSummaryParams['page']
  >,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketReporterSummaryParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof ticketReporterSummary>>,
        TError,
        TData,
        Awaited<ReturnType<typeof ticketReporterSummary>>,
        QueryKey,
        GetTicketReporterSummaryParams['page']
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTicketReporterSummaryQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ticketReporterSummary>>,
    QueryKey,
    GetTicketReporterSummaryParams['page']
  > = ({ signal, pageParam }) =>
    ticketReporterSummary(
      { ...params, page: pageParam || params?.['page'] },
      signal,
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof ticketReporterSummary>>,
    TError,
    TData,
    Awaited<ReturnType<typeof ticketReporterSummary>>,
    QueryKey,
    GetTicketReporterSummaryParams['page']
  > & { queryKey: QueryKey };
};

export type TicketReporterSummaryInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof ticketReporterSummary>>
>;
export type TicketReporterSummaryInfiniteQueryError = ErrorType<unknown>;

export function useTicketReporterSummaryInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof ticketReporterSummary>>,
    GetTicketReporterSummaryParams['page']
  >,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetTicketReporterSummaryParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof ticketReporterSummary>>,
        TError,
        TData,
        Awaited<ReturnType<typeof ticketReporterSummary>>,
        QueryKey,
        GetTicketReporterSummaryParams['page']
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketReporterSummary>>,
          TError,
          TData,
          QueryKey
        >,
        'initialData'
      >;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketReporterSummaryInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof ticketReporterSummary>>,
    GetTicketReporterSummaryParams['page']
  >,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketReporterSummaryParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof ticketReporterSummary>>,
        TError,
        TData,
        Awaited<ReturnType<typeof ticketReporterSummary>>,
        QueryKey,
        GetTicketReporterSummaryParams['page']
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketReporterSummary>>,
          TError,
          TData,
          QueryKey
        >,
        'initialData'
      >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketReporterSummaryInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof ticketReporterSummary>>,
    GetTicketReporterSummaryParams['page']
  >,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketReporterSummaryParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof ticketReporterSummary>>,
        TError,
        TData,
        Awaited<ReturnType<typeof ticketReporterSummary>>,
        QueryKey,
        GetTicketReporterSummaryParams['page']
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Reporter summary
 */

export function useTicketReporterSummaryInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof ticketReporterSummary>>,
    GetTicketReporterSummaryParams['page']
  >,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketReporterSummaryParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof ticketReporterSummary>>,
        TError,
        TData,
        Awaited<ReturnType<typeof ticketReporterSummary>>,
        QueryKey,
        GetTicketReporterSummaryParams['page']
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTicketReporterSummaryInfiniteQueryOptions(
    params,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getTicketReporterSummaryQueryOptions = <
  TData = Awaited<ReturnType<typeof ticketReporterSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketReporterSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketReporterSummary>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTicketReporterSummaryQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ticketReporterSummary>>
  > = ({ signal }) => ticketReporterSummary(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof ticketReporterSummary>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TicketReporterSummaryQueryResult = NonNullable<
  Awaited<ReturnType<typeof ticketReporterSummary>>
>;
export type TicketReporterSummaryQueryError = ErrorType<unknown>;

export function useTicketReporterSummary<
  TData = Awaited<ReturnType<typeof ticketReporterSummary>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetTicketReporterSummaryParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketReporterSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketReporterSummary>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketReporterSummary<
  TData = Awaited<ReturnType<typeof ticketReporterSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketReporterSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketReporterSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketReporterSummary>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketReporterSummary<
  TData = Awaited<ReturnType<typeof ticketReporterSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketReporterSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketReporterSummary>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Reporter summary
 */

export function useTicketReporterSummary<
  TData = Awaited<ReturnType<typeof ticketReporterSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketReporterSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketReporterSummary>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTicketReporterSummaryQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
