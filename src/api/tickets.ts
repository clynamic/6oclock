/**
 * Generated by orval v7.0.1 🍺
 * Do not edit manually.
 * 5-thirty
 * backend data aggregate for 6 o'clock
 * OpenAPI spec version: 0.0.1
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  GetModSummaryParams,
  GetReporterSummaryParams,
  GetTicketClosedSeriesParams,
  GetTicketOpenSeriesParams,
  GetTicketStatusSummaryParams,
  GetTicketTypeSummaryParams,
  ModSummary,
  ReporterSummary,
  TicketClosedPoint,
  TicketOpenPoint,
  TicketStatusSummary,
  TicketTypeSummary,
} from "./model";
import { makeRequest } from "../http/axios";
import type { ErrorType } from "../http/axios";

/**
 * Get ticket status (pending, approved, partial) counts for a given date range
 * @summary Ticket status summary
 */
export const ticketStatusSummary = (
  params?: GetTicketStatusSummaryParams,
  signal?: AbortSignal,
) => {
  return makeRequest<TicketStatusSummary>({
    url: `/tickets/metrics/status/summary`,
    method: "GET",
    params,
    signal,
  });
};

export const getTicketStatusSummaryQueryKey = (
  params?: GetTicketStatusSummaryParams,
) => {
  return [
    `/tickets/metrics/status/summary`,
    ...(params ? [params] : []),
  ] as const;
};

export const getTicketStatusSummaryQueryOptions = <
  TData = Awaited<ReturnType<typeof ticketStatusSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketStatusSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketStatusSummary>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTicketStatusSummaryQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ticketStatusSummary>>
  > = ({ signal }) => ticketStatusSummary(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof ticketStatusSummary>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TicketStatusSummaryQueryResult = NonNullable<
  Awaited<ReturnType<typeof ticketStatusSummary>>
>;
export type TicketStatusSummaryQueryError = ErrorType<unknown>;

export function useTicketStatusSummary<
  TData = Awaited<ReturnType<typeof ticketStatusSummary>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetTicketStatusSummaryParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketStatusSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketStatusSummary>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketStatusSummary<
  TData = Awaited<ReturnType<typeof ticketStatusSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketStatusSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketStatusSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketStatusSummary>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketStatusSummary<
  TData = Awaited<ReturnType<typeof ticketStatusSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketStatusSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketStatusSummary>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Ticket status summary
 */

export function useTicketStatusSummary<
  TData = Awaited<ReturnType<typeof ticketStatusSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketStatusSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketStatusSummary>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTicketStatusSummaryQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get ticket types counts for a given date range
 * @summary Ticket type summary
 */
export const ticketTypeSummary = (
  params?: GetTicketTypeSummaryParams,
  signal?: AbortSignal,
) => {
  return makeRequest<TicketTypeSummary>({
    url: `/tickets/metrics/type/summary`,
    method: "GET",
    params,
    signal,
  });
};

export const getTicketTypeSummaryQueryKey = (
  params?: GetTicketTypeSummaryParams,
) => {
  return [
    `/tickets/metrics/type/summary`,
    ...(params ? [params] : []),
  ] as const;
};

export const getTicketTypeSummaryQueryOptions = <
  TData = Awaited<ReturnType<typeof ticketTypeSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketTypeSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketTypeSummary>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTicketTypeSummaryQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ticketTypeSummary>>
  > = ({ signal }) => ticketTypeSummary(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof ticketTypeSummary>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TicketTypeSummaryQueryResult = NonNullable<
  Awaited<ReturnType<typeof ticketTypeSummary>>
>;
export type TicketTypeSummaryQueryError = ErrorType<unknown>;

export function useTicketTypeSummary<
  TData = Awaited<ReturnType<typeof ticketTypeSummary>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetTicketTypeSummaryParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketTypeSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketTypeSummary>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketTypeSummary<
  TData = Awaited<ReturnType<typeof ticketTypeSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketTypeSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketTypeSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketTypeSummary>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketTypeSummary<
  TData = Awaited<ReturnType<typeof ticketTypeSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketTypeSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketTypeSummary>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Ticket type summary
 */

export function useTicketTypeSummary<
  TData = Awaited<ReturnType<typeof ticketTypeSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketTypeSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketTypeSummary>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTicketTypeSummaryQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get a time series of open tickets for a given date range
 * @summary Ticket open series
 */
export const ticketOpenSeries = (
  params?: GetTicketOpenSeriesParams,
  signal?: AbortSignal,
) => {
  return makeRequest<TicketOpenPoint[]>({
    url: `/tickets/metrics/open/series`,
    method: "GET",
    params,
    signal,
  });
};

export const getTicketOpenSeriesQueryKey = (
  params?: GetTicketOpenSeriesParams,
) => {
  return [`/tickets/metrics/open/series`, ...(params ? [params] : [])] as const;
};

export const getTicketOpenSeriesQueryOptions = <
  TData = Awaited<ReturnType<typeof ticketOpenSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketOpenSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketOpenSeries>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTicketOpenSeriesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ticketOpenSeries>>
  > = ({ signal }) => ticketOpenSeries(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof ticketOpenSeries>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TicketOpenSeriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof ticketOpenSeries>>
>;
export type TicketOpenSeriesQueryError = ErrorType<unknown>;

export function useTicketOpenSeries<
  TData = Awaited<ReturnType<typeof ticketOpenSeries>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetTicketOpenSeriesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketOpenSeries>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketOpenSeries>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketOpenSeries<
  TData = Awaited<ReturnType<typeof ticketOpenSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketOpenSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketOpenSeries>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketOpenSeries>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketOpenSeries<
  TData = Awaited<ReturnType<typeof ticketOpenSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketOpenSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketOpenSeries>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Ticket open series
 */

export function useTicketOpenSeries<
  TData = Awaited<ReturnType<typeof ticketOpenSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketOpenSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketOpenSeries>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTicketOpenSeriesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get a time series of closed tickets for a given date range
 * @summary Ticket closed series
 */
export const ticketClosedSeries = (
  params?: GetTicketClosedSeriesParams,
  signal?: AbortSignal,
) => {
  return makeRequest<TicketClosedPoint[]>({
    url: `/tickets/metrics/closed/series`,
    method: "GET",
    params,
    signal,
  });
};

export const getTicketClosedSeriesQueryKey = (
  params?: GetTicketClosedSeriesParams,
) => {
  return [
    `/tickets/metrics/closed/series`,
    ...(params ? [params] : []),
  ] as const;
};

export const getTicketClosedSeriesQueryOptions = <
  TData = Awaited<ReturnType<typeof ticketClosedSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketClosedSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketClosedSeries>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTicketClosedSeriesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ticketClosedSeries>>
  > = ({ signal }) => ticketClosedSeries(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof ticketClosedSeries>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TicketClosedSeriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof ticketClosedSeries>>
>;
export type TicketClosedSeriesQueryError = ErrorType<unknown>;

export function useTicketClosedSeries<
  TData = Awaited<ReturnType<typeof ticketClosedSeries>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetTicketClosedSeriesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketClosedSeries>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketClosedSeries>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketClosedSeries<
  TData = Awaited<ReturnType<typeof ticketClosedSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketClosedSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketClosedSeries>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ticketClosedSeries>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTicketClosedSeries<
  TData = Awaited<ReturnType<typeof ticketClosedSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketClosedSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketClosedSeries>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Ticket closed series
 */

export function useTicketClosedSeries<
  TData = Awaited<ReturnType<typeof ticketClosedSeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTicketClosedSeriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ticketClosedSeries>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTicketClosedSeriesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get a summary of the top 20 moderators (claimed and handled tickets) for a given date range
 * @summary Moderator summary
 */
export const modSummary = (
  params?: GetModSummaryParams,
  signal?: AbortSignal,
) => {
  return makeRequest<ModSummary[]>({
    url: `/tickets/metrics/mod/summary`,
    method: "GET",
    params,
    signal,
  });
};

export const getModSummaryQueryKey = (params?: GetModSummaryParams) => {
  return [`/tickets/metrics/mod/summary`, ...(params ? [params] : [])] as const;
};

export const getModSummaryQueryOptions = <
  TData = Awaited<ReturnType<typeof modSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetModSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof modSummary>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getModSummaryQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof modSummary>>> = ({
    signal,
  }) => modSummary(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof modSummary>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ModSummaryQueryResult = NonNullable<
  Awaited<ReturnType<typeof modSummary>>
>;
export type ModSummaryQueryError = ErrorType<unknown>;

export function useModSummary<
  TData = Awaited<ReturnType<typeof modSummary>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetModSummaryParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof modSummary>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof modSummary>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useModSummary<
  TData = Awaited<ReturnType<typeof modSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetModSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof modSummary>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof modSummary>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useModSummary<
  TData = Awaited<ReturnType<typeof modSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetModSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof modSummary>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Moderator summary
 */

export function useModSummary<
  TData = Awaited<ReturnType<typeof modSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetModSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof modSummary>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getModSummaryQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get a summary of the top 20 reporters (submitted tickets) for a given date range
 * @summary Reporter summary
 */
export const reporterSummary = (
  params?: GetReporterSummaryParams,
  signal?: AbortSignal,
) => {
  return makeRequest<ReporterSummary[]>({
    url: `/tickets/metrics/reporter/summary`,
    method: "GET",
    params,
    signal,
  });
};

export const getReporterSummaryQueryKey = (
  params?: GetReporterSummaryParams,
) => {
  return [
    `/tickets/metrics/reporter/summary`,
    ...(params ? [params] : []),
  ] as const;
};

export const getReporterSummaryQueryOptions = <
  TData = Awaited<ReturnType<typeof reporterSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetReporterSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof reporterSummary>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getReporterSummaryQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof reporterSummary>>> = ({
    signal,
  }) => reporterSummary(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof reporterSummary>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ReporterSummaryQueryResult = NonNullable<
  Awaited<ReturnType<typeof reporterSummary>>
>;
export type ReporterSummaryQueryError = ErrorType<unknown>;

export function useReporterSummary<
  TData = Awaited<ReturnType<typeof reporterSummary>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetReporterSummaryParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof reporterSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof reporterSummary>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useReporterSummary<
  TData = Awaited<ReturnType<typeof reporterSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetReporterSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof reporterSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof reporterSummary>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useReporterSummary<
  TData = Awaited<ReturnType<typeof reporterSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetReporterSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof reporterSummary>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Reporter summary
 */

export function useReporterSummary<
  TData = Awaited<ReturnType<typeof reporterSummary>>,
  TError = ErrorType<unknown>,
>(
  params?: GetReporterSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof reporterSummary>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getReporterSummaryQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
