/**
 * Generated by orval v7.0.1 🍺
 * Do not edit manually.
 * 5-thirty
 * backend data aggregate for 6 o'clock
 * OpenAPI spec version: 0.0.4
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import type { DashboardConfig, DashboardUpdate } from './model';
import { makeRequest } from '../http/axios';
import type { ErrorType } from '../http/axios';

/**
 * Get dashboard by type, for the current user
 * @summary Get dashboard
 */
export const dashboard = (type: string, signal?: AbortSignal) => {
  return makeRequest<DashboardConfig>({
    url: `/dashboards/${encodeURIComponent(String(type))}`,
    method: 'GET',
    signal,
  });
};

export const getDashboardQueryKey = (type: string) => {
  return [`/dashboards/${type}`] as const;
};

export const getDashboardQueryOptions = <
  TData = Awaited<ReturnType<typeof dashboard>>,
  TError = ErrorType<void>,
>(
  type: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof dashboard>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDashboardQueryKey(type);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof dashboard>>> = ({
    signal,
  }) => dashboard(type, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!type,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof dashboard>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type DashboardQueryResult = NonNullable<
  Awaited<ReturnType<typeof dashboard>>
>;
export type DashboardQueryError = ErrorType<void>;

export function useDashboard<
  TData = Awaited<ReturnType<typeof dashboard>>,
  TError = ErrorType<void>,
>(
  type: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof dashboard>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof dashboard>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useDashboard<
  TData = Awaited<ReturnType<typeof dashboard>>,
  TError = ErrorType<void>,
>(
  type: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof dashboard>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof dashboard>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useDashboard<
  TData = Awaited<ReturnType<typeof dashboard>>,
  TError = ErrorType<void>,
>(
  type: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof dashboard>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get dashboard
 */

export function useDashboard<
  TData = Awaited<ReturnType<typeof dashboard>>,
  TError = ErrorType<void>,
>(
  type: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof dashboard>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getDashboardQueryOptions(type, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update dashboard by type, for the current user
 * @summary Update dashboard
 */
export const updateDashboard = (
  type: string,
  dashboardUpdate: DashboardUpdate,
) => {
  return makeRequest<void>({
    url: `/dashboards/${encodeURIComponent(String(type))}`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: dashboardUpdate,
  });
};

export const getUpdateDashboardMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateDashboard>>,
    TError,
    { type: string; data: DashboardUpdate },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateDashboard>>,
  TError,
  { type: string; data: DashboardUpdate },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateDashboard>>,
    { type: string; data: DashboardUpdate }
  > = (props) => {
    const { type, data } = props ?? {};

    return updateDashboard(type, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateDashboardMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateDashboard>>
>;
export type UpdateDashboardMutationBody = DashboardUpdate;
export type UpdateDashboardMutationError = ErrorType<unknown>;

/**
 * @summary Update dashboard
 */
export const useUpdateDashboard = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateDashboard>>,
    TError,
    { type: string; data: DashboardUpdate },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateDashboard>>,
  TError,
  { type: string; data: DashboardUpdate },
  TContext
> => {
  const mutationOptions = getUpdateDashboardMutationOptions(options);

  return useMutation(mutationOptions);
};
