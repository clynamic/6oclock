/**
 * Generated by orval v7.13.0 🍺
 * Do not edit manually.
 * 5-thirty
 * backend data aggregate for 6 o'clock
 * OpenAPI spec version: 0.0.8
 */
import {
  useInfiniteQuery,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetManifestHealthParams,
  ManifestHealth
} from './model';

import { makeRequest } from '../http/axios';
import type { ErrorType } from '../http/axios';





/**
 * Check the health of the application
 * @summary Health Check
 */
export const healthCheck = (
    
 signal?: AbortSignal
) => {
      
      
      return makeRequest<void>(
      {url: `/health`, method: 'GET', signal
    },
      );
    }
  

export const getHealthCheckQueryKey = () => {
    return [`/health`] as const;
    }

    
export const getHealthCheckQueryOptions = <TData = Awaited<ReturnType<typeof healthCheck>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheck>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHealthCheckQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof healthCheck>>> = ({ signal }) => healthCheck(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof healthCheck>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type HealthCheckQueryResult = NonNullable<Awaited<ReturnType<typeof healthCheck>>>
export type HealthCheckQueryError = ErrorType<unknown>


export function useHealthCheck<TData = Awaited<ReturnType<typeof healthCheck>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheck>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheck>>,
          TError,
          Awaited<ReturnType<typeof healthCheck>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheck<TData = Awaited<ReturnType<typeof healthCheck>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheck>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheck>>,
          TError,
          Awaited<ReturnType<typeof healthCheck>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheck<TData = Awaited<ReturnType<typeof healthCheck>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheck>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Health Check
 */

export function useHealthCheck<TData = Awaited<ReturnType<typeof healthCheck>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheck>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getHealthCheckQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Retrieve manifest health
 * @summary Retrieve manifest health
 */
export const manifestHealth = (
    params?: GetManifestHealthParams,
 signal?: AbortSignal
) => {
      
      
      return makeRequest<ManifestHealth[]>(
      {url: `/health/manifests`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getManifestHealthQueryKey = (params?: GetManifestHealthParams,) => {
    return [`/health/manifests`, ...(params ? [params]: [])] as const;
    }

    
export const getManifestHealthInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof manifestHealth>>, GetManifestHealthParams['page']>, TError = ErrorType<unknown>>(params?: GetManifestHealthParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof manifestHealth>>, TError, TData, QueryKey, GetManifestHealthParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getManifestHealthQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof manifestHealth>>, QueryKey, GetManifestHealthParams['page']> = ({ signal, pageParam }) => manifestHealth({...params, 'page': pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof manifestHealth>>, TError, TData, QueryKey, GetManifestHealthParams['page']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ManifestHealthInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof manifestHealth>>>
export type ManifestHealthInfiniteQueryError = ErrorType<unknown>


export function useManifestHealthInfinite<TData = InfiniteData<Awaited<ReturnType<typeof manifestHealth>>, GetManifestHealthParams['page']>, TError = ErrorType<unknown>>(
 params: undefined |  GetManifestHealthParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof manifestHealth>>, TError, TData, QueryKey, GetManifestHealthParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof manifestHealth>>,
          TError,
          Awaited<ReturnType<typeof manifestHealth>>, QueryKey
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useManifestHealthInfinite<TData = InfiniteData<Awaited<ReturnType<typeof manifestHealth>>, GetManifestHealthParams['page']>, TError = ErrorType<unknown>>(
 params?: GetManifestHealthParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof manifestHealth>>, TError, TData, QueryKey, GetManifestHealthParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof manifestHealth>>,
          TError,
          Awaited<ReturnType<typeof manifestHealth>>, QueryKey
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useManifestHealthInfinite<TData = InfiniteData<Awaited<ReturnType<typeof manifestHealth>>, GetManifestHealthParams['page']>, TError = ErrorType<unknown>>(
 params?: GetManifestHealthParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof manifestHealth>>, TError, TData, QueryKey, GetManifestHealthParams['page']>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Retrieve manifest health
 */

export function useManifestHealthInfinite<TData = InfiniteData<Awaited<ReturnType<typeof manifestHealth>>, GetManifestHealthParams['page']>, TError = ErrorType<unknown>>(
 params?: GetManifestHealthParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof manifestHealth>>, TError, TData, QueryKey, GetManifestHealthParams['page']>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getManifestHealthInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getManifestHealthQueryOptions = <TData = Awaited<ReturnType<typeof manifestHealth>>, TError = ErrorType<unknown>>(params?: GetManifestHealthParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof manifestHealth>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getManifestHealthQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof manifestHealth>>> = ({ signal }) => manifestHealth(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof manifestHealth>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ManifestHealthQueryResult = NonNullable<Awaited<ReturnType<typeof manifestHealth>>>
export type ManifestHealthQueryError = ErrorType<unknown>


export function useManifestHealth<TData = Awaited<ReturnType<typeof manifestHealth>>, TError = ErrorType<unknown>>(
 params: undefined |  GetManifestHealthParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof manifestHealth>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof manifestHealth>>,
          TError,
          Awaited<ReturnType<typeof manifestHealth>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useManifestHealth<TData = Awaited<ReturnType<typeof manifestHealth>>, TError = ErrorType<unknown>>(
 params?: GetManifestHealthParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof manifestHealth>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof manifestHealth>>,
          TError,
          Awaited<ReturnType<typeof manifestHealth>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useManifestHealth<TData = Awaited<ReturnType<typeof manifestHealth>>, TError = ErrorType<unknown>>(
 params?: GetManifestHealthParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof manifestHealth>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Retrieve manifest health
 */

export function useManifestHealth<TData = Awaited<ReturnType<typeof manifestHealth>>, TError = ErrorType<unknown>>(
 params?: GetManifestHealthParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof manifestHealth>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getManifestHealthQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



