/**
 * Generated by orval v7.0.1 🍺
 * Do not edit manually.
 * 5-thirty
 * backend data aggregate for 6 o'clock
 * OpenAPI spec version: 0.0.1
 */
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";

import type { ErrorType } from "../http/axios";
import { makeRequest } from "../http/axios";
import type { UserCredentials } from "./model";

/**
 * Login with username and api key
 * @summary Login
 */
export const login = (userCredentials: UserCredentials) => {
  return makeRequest<string>({
    url: `/auth/login`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: userCredentials,
  });
};

export const getLoginMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof login>>,
    TError,
    { data: UserCredentials },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof login>>,
  TError,
  { data: UserCredentials },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof login>>,
    { data: UserCredentials }
  > = (props) => {
    const { data } = props ?? {};

    return login(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type LoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof login>>
>;
export type LoginMutationBody = UserCredentials;
export type LoginMutationError = ErrorType<unknown>;

/**
 * @summary Login
 */
export const useLogin = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof login>>,
    TError,
    { data: UserCredentials },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof login>>,
  TError,
  { data: UserCredentials },
  TContext
> => {
  const mutationOptions = getLoginMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Validate token
 * @summary Validate
 */
export const validate = (signal?: AbortSignal) => {
  return makeRequest<void>({ url: `/auth/validate`, method: "GET", signal });
};

export const getValidateQueryKey = () => {
  return [`/auth/validate`] as const;
};

export const getValidateQueryOptions = <
  TData = Awaited<ReturnType<typeof validate>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof validate>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getValidateQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof validate>>> = ({
    signal,
  }) => validate(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof validate>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ValidateQueryResult = NonNullable<
  Awaited<ReturnType<typeof validate>>
>;
export type ValidateQueryError = ErrorType<void>;

export function useValidate<
  TData = Awaited<ReturnType<typeof validate>>,
  TError = ErrorType<void>,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof validate>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof validate>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useValidate<
  TData = Awaited<ReturnType<typeof validate>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof validate>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof validate>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useValidate<
  TData = Awaited<ReturnType<typeof validate>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof validate>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Validate
 */

export function useValidate<
  TData = Awaited<ReturnType<typeof validate>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof validate>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getValidateQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
