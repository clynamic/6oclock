/**
 * Generated by orval v7.13.0 🍺
 * Do not edit manually.
 * 5-thirty
 * backend data aggregate for 6 o'clock
 * OpenAPI spec version: 0.0.8
 */
import {
  useInfiniteQuery,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetPostUploaderSummaryParams,
  GetUploadCountParams,
  PostUploaderSummary,
  SeriesCountPoint
} from './model';

import { makeRequest } from '../http/axios';
import type { ErrorType } from '../http/axios';





/**
 * Get a time series of upload counts for a given date range
 * @summary Upload series
 */
export const uploadCount = (
    params?: GetUploadCountParams,
 signal?: AbortSignal
) => {
      
      
      return makeRequest<SeriesCountPoint[]>(
      {url: `/metrics/uploads/count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getUploadCountQueryKey = (params?: GetUploadCountParams,) => {
    return [`/metrics/uploads/count`, ...(params ? [params]: [])] as const;
    }

    
export const getUploadCountQueryOptions = <TData = Awaited<ReturnType<typeof uploadCount>>, TError = ErrorType<unknown>>(params?: GetUploadCountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof uploadCount>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUploadCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof uploadCount>>> = ({ signal }) => uploadCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof uploadCount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type UploadCountQueryResult = NonNullable<Awaited<ReturnType<typeof uploadCount>>>
export type UploadCountQueryError = ErrorType<unknown>


export function useUploadCount<TData = Awaited<ReturnType<typeof uploadCount>>, TError = ErrorType<unknown>>(
 params: undefined |  GetUploadCountParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof uploadCount>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof uploadCount>>,
          TError,
          Awaited<ReturnType<typeof uploadCount>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUploadCount<TData = Awaited<ReturnType<typeof uploadCount>>, TError = ErrorType<unknown>>(
 params?: GetUploadCountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof uploadCount>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof uploadCount>>,
          TError,
          Awaited<ReturnType<typeof uploadCount>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUploadCount<TData = Awaited<ReturnType<typeof uploadCount>>, TError = ErrorType<unknown>>(
 params?: GetUploadCountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof uploadCount>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Upload series
 */

export function useUploadCount<TData = Awaited<ReturnType<typeof uploadCount>>, TError = ErrorType<unknown>>(
 params?: GetUploadCountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof uploadCount>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getUploadCountQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Get a summary of post uploading counts for a given date range
 * @summary Uploader summary
 */
export const postUploaderSummary = (
    params?: GetPostUploaderSummaryParams,
 signal?: AbortSignal
) => {
      
      
      return makeRequest<PostUploaderSummary[]>(
      {url: `/metrics/uploads/uploader/summary`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getPostUploaderSummaryQueryKey = (params?: GetPostUploaderSummaryParams,) => {
    return [`/metrics/uploads/uploader/summary`, ...(params ? [params]: [])] as const;
    }

    
export const getPostUploaderSummaryInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof postUploaderSummary>>, GetPostUploaderSummaryParams['page']>, TError = ErrorType<unknown>>(params?: GetPostUploaderSummaryParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postUploaderSummary>>, TError, TData, QueryKey, GetPostUploaderSummaryParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPostUploaderSummaryQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof postUploaderSummary>>, QueryKey, GetPostUploaderSummaryParams['page']> = ({ signal, pageParam }) => postUploaderSummary({...params, 'page': pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof postUploaderSummary>>, TError, TData, QueryKey, GetPostUploaderSummaryParams['page']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PostUploaderSummaryInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof postUploaderSummary>>>
export type PostUploaderSummaryInfiniteQueryError = ErrorType<unknown>


export function usePostUploaderSummaryInfinite<TData = InfiniteData<Awaited<ReturnType<typeof postUploaderSummary>>, GetPostUploaderSummaryParams['page']>, TError = ErrorType<unknown>>(
 params: undefined |  GetPostUploaderSummaryParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postUploaderSummary>>, TError, TData, QueryKey, GetPostUploaderSummaryParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof postUploaderSummary>>,
          TError,
          Awaited<ReturnType<typeof postUploaderSummary>>, QueryKey
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePostUploaderSummaryInfinite<TData = InfiniteData<Awaited<ReturnType<typeof postUploaderSummary>>, GetPostUploaderSummaryParams['page']>, TError = ErrorType<unknown>>(
 params?: GetPostUploaderSummaryParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postUploaderSummary>>, TError, TData, QueryKey, GetPostUploaderSummaryParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof postUploaderSummary>>,
          TError,
          Awaited<ReturnType<typeof postUploaderSummary>>, QueryKey
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePostUploaderSummaryInfinite<TData = InfiniteData<Awaited<ReturnType<typeof postUploaderSummary>>, GetPostUploaderSummaryParams['page']>, TError = ErrorType<unknown>>(
 params?: GetPostUploaderSummaryParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postUploaderSummary>>, TError, TData, QueryKey, GetPostUploaderSummaryParams['page']>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Uploader summary
 */

export function usePostUploaderSummaryInfinite<TData = InfiniteData<Awaited<ReturnType<typeof postUploaderSummary>>, GetPostUploaderSummaryParams['page']>, TError = ErrorType<unknown>>(
 params?: GetPostUploaderSummaryParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postUploaderSummary>>, TError, TData, QueryKey, GetPostUploaderSummaryParams['page']>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPostUploaderSummaryInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getPostUploaderSummaryQueryOptions = <TData = Awaited<ReturnType<typeof postUploaderSummary>>, TError = ErrorType<unknown>>(params?: GetPostUploaderSummaryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof postUploaderSummary>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPostUploaderSummaryQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof postUploaderSummary>>> = ({ signal }) => postUploaderSummary(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof postUploaderSummary>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PostUploaderSummaryQueryResult = NonNullable<Awaited<ReturnType<typeof postUploaderSummary>>>
export type PostUploaderSummaryQueryError = ErrorType<unknown>


export function usePostUploaderSummary<TData = Awaited<ReturnType<typeof postUploaderSummary>>, TError = ErrorType<unknown>>(
 params: undefined |  GetPostUploaderSummaryParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof postUploaderSummary>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof postUploaderSummary>>,
          TError,
          Awaited<ReturnType<typeof postUploaderSummary>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePostUploaderSummary<TData = Awaited<ReturnType<typeof postUploaderSummary>>, TError = ErrorType<unknown>>(
 params?: GetPostUploaderSummaryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof postUploaderSummary>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof postUploaderSummary>>,
          TError,
          Awaited<ReturnType<typeof postUploaderSummary>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePostUploaderSummary<TData = Awaited<ReturnType<typeof postUploaderSummary>>, TError = ErrorType<unknown>>(
 params?: GetPostUploaderSummaryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof postUploaderSummary>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Uploader summary
 */

export function usePostUploaderSummary<TData = Awaited<ReturnType<typeof postUploaderSummary>>, TError = ErrorType<unknown>>(
 params?: GetPostUploaderSummaryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof postUploaderSummary>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPostUploaderSummaryQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



