/**
 * Generated by orval v7.13.0 🍺
 * Do not edit manually.
 * 5-thirty
 * backend data aggregate for 6 o'clock
 * OpenAPI spec version: 0.0.8
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetPostPendingSeriesParams,
  GetPostStatusSummaryParams,
  PostStatusSummary,
  SeriesCountPoint
} from './model';

import { makeRequest } from '../http/axios';
import type { ErrorType } from '../http/axios';





/**
 * Get post status (approved, deleted, permitted) counts for a given date range
 * @summary Post status summary
 */
export const postStatusSummary = (
    params?: GetPostStatusSummaryParams,
 signal?: AbortSignal
) => {
      
      
      return makeRequest<PostStatusSummary>(
      {url: `/metrics/posts/status/summary`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getPostStatusSummaryQueryKey = (params?: GetPostStatusSummaryParams,) => {
    return [`/metrics/posts/status/summary`, ...(params ? [params]: [])] as const;
    }

    
export const getPostStatusSummaryQueryOptions = <TData = Awaited<ReturnType<typeof postStatusSummary>>, TError = ErrorType<unknown>>(params?: GetPostStatusSummaryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof postStatusSummary>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPostStatusSummaryQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof postStatusSummary>>> = ({ signal }) => postStatusSummary(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof postStatusSummary>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PostStatusSummaryQueryResult = NonNullable<Awaited<ReturnType<typeof postStatusSummary>>>
export type PostStatusSummaryQueryError = ErrorType<unknown>


export function usePostStatusSummary<TData = Awaited<ReturnType<typeof postStatusSummary>>, TError = ErrorType<unknown>>(
 params: undefined |  GetPostStatusSummaryParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof postStatusSummary>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof postStatusSummary>>,
          TError,
          Awaited<ReturnType<typeof postStatusSummary>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePostStatusSummary<TData = Awaited<ReturnType<typeof postStatusSummary>>, TError = ErrorType<unknown>>(
 params?: GetPostStatusSummaryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof postStatusSummary>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof postStatusSummary>>,
          TError,
          Awaited<ReturnType<typeof postStatusSummary>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePostStatusSummary<TData = Awaited<ReturnType<typeof postStatusSummary>>, TError = ErrorType<unknown>>(
 params?: GetPostStatusSummaryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof postStatusSummary>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Post status summary
 */

export function usePostStatusSummary<TData = Awaited<ReturnType<typeof postStatusSummary>>, TError = ErrorType<unknown>>(
 params?: GetPostStatusSummaryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof postStatusSummary>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPostStatusSummaryQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Get post pending series for a given date range
 * @summary Post pending series
 */
export const postPendingSeries = (
    params?: GetPostPendingSeriesParams,
 signal?: AbortSignal
) => {
      
      
      return makeRequest<SeriesCountPoint[]>(
      {url: `/metrics/posts/pending/series`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getPostPendingSeriesQueryKey = (params?: GetPostPendingSeriesParams,) => {
    return [`/metrics/posts/pending/series`, ...(params ? [params]: [])] as const;
    }

    
export const getPostPendingSeriesQueryOptions = <TData = Awaited<ReturnType<typeof postPendingSeries>>, TError = ErrorType<unknown>>(params?: GetPostPendingSeriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof postPendingSeries>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPostPendingSeriesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof postPendingSeries>>> = ({ signal }) => postPendingSeries(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof postPendingSeries>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PostPendingSeriesQueryResult = NonNullable<Awaited<ReturnType<typeof postPendingSeries>>>
export type PostPendingSeriesQueryError = ErrorType<unknown>


export function usePostPendingSeries<TData = Awaited<ReturnType<typeof postPendingSeries>>, TError = ErrorType<unknown>>(
 params: undefined |  GetPostPendingSeriesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof postPendingSeries>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof postPendingSeries>>,
          TError,
          Awaited<ReturnType<typeof postPendingSeries>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePostPendingSeries<TData = Awaited<ReturnType<typeof postPendingSeries>>, TError = ErrorType<unknown>>(
 params?: GetPostPendingSeriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof postPendingSeries>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof postPendingSeries>>,
          TError,
          Awaited<ReturnType<typeof postPendingSeries>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePostPendingSeries<TData = Awaited<ReturnType<typeof postPendingSeries>>, TError = ErrorType<unknown>>(
 params?: GetPostPendingSeriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof postPendingSeries>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Post pending series
 */

export function usePostPendingSeries<TData = Awaited<ReturnType<typeof postPendingSeries>>, TError = ErrorType<unknown>>(
 params?: GetPostPendingSeriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof postPendingSeries>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPostPendingSeriesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



