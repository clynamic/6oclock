/**
 * Generated by orval v7.0.1 🍺
 * Do not edit manually.
 * e621 API
 * An API for accessing user information and other resources on e621 and e926.
 * OpenAPI spec version: 1.0.0
 */
import { useInfiniteQuery, useQuery } from "@tanstack/react-query";
import type {
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type { GetPostsParams, Post } from "./model";
import { makeRequest } from "../http/axios";
import type { ErrorType } from "../http/axios";

/**
 * Returns a list of posts filtered by tags.
 * @summary Get a list of posts
 */
export const posts = (params?: GetPostsParams, signal?: AbortSignal) => {
  return makeRequest<Post[]>({
    url: `/posts.json`,
    method: "GET",
    params,
    signal,
  });
};

export const getPostsQueryKey = (params?: GetPostsParams) => {
  return [`/posts.json`, ...(params ? [params] : [])] as const;
};

export const getPostsInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof posts>>,
    GetPostsParams["page"]
  >,
  TError = ErrorType<void>,
>(
  params?: GetPostsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof posts>>,
        TError,
        TData,
        Awaited<ReturnType<typeof posts>>,
        QueryKey,
        GetPostsParams["page"]
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPostsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof posts>>,
    QueryKey,
    GetPostsParams["page"]
  > = ({ signal, pageParam }) =>
    posts({ ...params, page: pageParam || params?.["page"] }, signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof posts>>,
    TError,
    TData,
    Awaited<ReturnType<typeof posts>>,
    QueryKey,
    GetPostsParams["page"]
  > & { queryKey: QueryKey };
};

export type PostsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof posts>>
>;
export type PostsInfiniteQueryError = ErrorType<void>;

export function usePostsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof posts>>,
    GetPostsParams["page"]
  >,
  TError = ErrorType<void>,
>(
  params: undefined | GetPostsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof posts>>,
        TError,
        TData,
        Awaited<ReturnType<typeof posts>>,
        QueryKey,
        GetPostsParams["page"]
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof posts>>,
          TError,
          TData,
          QueryKey
        >,
        "initialData"
      >;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };
export function usePostsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof posts>>,
    GetPostsParams["page"]
  >,
  TError = ErrorType<void>,
>(
  params?: GetPostsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof posts>>,
        TError,
        TData,
        Awaited<ReturnType<typeof posts>>,
        QueryKey,
        GetPostsParams["page"]
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof posts>>,
          TError,
          TData,
          QueryKey
        >,
        "initialData"
      >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };
export function usePostsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof posts>>,
    GetPostsParams["page"]
  >,
  TError = ErrorType<void>,
>(
  params?: GetPostsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof posts>>,
        TError,
        TData,
        Awaited<ReturnType<typeof posts>>,
        QueryKey,
        GetPostsParams["page"]
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get a list of posts
 */

export function usePostsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof posts>>,
    GetPostsParams["page"]
  >,
  TError = ErrorType<void>,
>(
  params?: GetPostsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof posts>>,
        TError,
        TData,
        Awaited<ReturnType<typeof posts>>,
        QueryKey,
        GetPostsParams["page"]
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getPostsInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getPostsQueryOptions = <
  TData = Awaited<ReturnType<typeof posts>>,
  TError = ErrorType<void>,
>(
  params?: GetPostsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof posts>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPostsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof posts>>> = ({
    signal,
  }) => posts(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof posts>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type PostsQueryResult = NonNullable<Awaited<ReturnType<typeof posts>>>;
export type PostsQueryError = ErrorType<void>;

export function usePosts<
  TData = Awaited<ReturnType<typeof posts>>,
  TError = ErrorType<void>,
>(
  params: undefined | GetPostsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof posts>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof posts>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function usePosts<
  TData = Awaited<ReturnType<typeof posts>>,
  TError = ErrorType<void>,
>(
  params?: GetPostsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof posts>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof posts>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function usePosts<
  TData = Awaited<ReturnType<typeof posts>>,
  TError = ErrorType<void>,
>(
  params?: GetPostsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof posts>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get a list of posts
 */

export function usePosts<
  TData = Awaited<ReturnType<typeof posts>>,
  TError = ErrorType<void>,
>(
  params?: GetPostsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof posts>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getPostsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Returns detailed information about a specific post identified by its ID.
 * @summary Get a post by ID
 */
export const post = (id: number, signal?: AbortSignal) => {
  return makeRequest<Post>({
    url: `/posts/${encodeURIComponent(String(id))}.json`,
    method: "GET",
    signal,
  });
};

export const getPostQueryKey = (id: number) => {
  return [`/posts/${id}.json`] as const;
};

export const getPostQueryOptions = <
  TData = Awaited<ReturnType<typeof post>>,
  TError = ErrorType<void>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof post>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPostQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof post>>> = ({
    signal,
  }) => post(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof post>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type PostQueryResult = NonNullable<Awaited<ReturnType<typeof post>>>;
export type PostQueryError = ErrorType<void>;

export function usePost<
  TData = Awaited<ReturnType<typeof post>>,
  TError = ErrorType<void>,
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof post>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof post>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function usePost<
  TData = Awaited<ReturnType<typeof post>>,
  TError = ErrorType<void>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof post>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof post>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function usePost<
  TData = Awaited<ReturnType<typeof post>>,
  TError = ErrorType<void>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof post>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get a post by ID
 */

export function usePost<
  TData = Awaited<ReturnType<typeof post>>,
  TError = ErrorType<void>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof post>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getPostQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
