/**
 * Generated by orval v7.0.1 🍺
 * Do not edit manually.
 * 5-thirty
 * backend data aggregate for 6 o'clock
 * OpenAPI spec version: 0.0.1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type { Dashboard, DashboardUpdate } from "./model";
import { makeRequest } from "../http/axios";
import type { ErrorType } from "../http/axios";

/**
 * Get dashboard by type, for the current user
 * @summary Get dashboard
 */
export const dashboardControllerGet = (type: string, signal?: AbortSignal) => {
  return makeRequest<Dashboard>({
    url: `/dashboard/${encodeURIComponent(String(type))}`,
    method: "GET",
    signal,
  });
};

export const getDashboardControllerGetQueryKey = (type: string) => {
  return [`/dashboard/${type}`] as const;
};

export const getDashboardControllerGetQueryOptions = <
  TData = Awaited<ReturnType<typeof dashboardControllerGet>>,
  TError = ErrorType<void>,
>(
  type: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof dashboardControllerGet>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getDashboardControllerGetQueryKey(type);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof dashboardControllerGet>>
  > = ({ signal }) => dashboardControllerGet(type, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!type,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof dashboardControllerGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type DashboardControllerGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof dashboardControllerGet>>
>;
export type DashboardControllerGetQueryError = ErrorType<void>;

export function useDashboardControllerGet<
  TData = Awaited<ReturnType<typeof dashboardControllerGet>>,
  TError = ErrorType<void>,
>(
  type: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof dashboardControllerGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof dashboardControllerGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useDashboardControllerGet<
  TData = Awaited<ReturnType<typeof dashboardControllerGet>>,
  TError = ErrorType<void>,
>(
  type: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof dashboardControllerGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof dashboardControllerGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useDashboardControllerGet<
  TData = Awaited<ReturnType<typeof dashboardControllerGet>>,
  TError = ErrorType<void>,
>(
  type: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof dashboardControllerGet>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get dashboard
 */

export function useDashboardControllerGet<
  TData = Awaited<ReturnType<typeof dashboardControllerGet>>,
  TError = ErrorType<void>,
>(
  type: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof dashboardControllerGet>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getDashboardControllerGetQueryOptions(type, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update dashboard by type, for the current user
 * @summary Update dashboard
 */
export const dashboardControllerUpdate = (
  type: string,
  dashboardUpdate: DashboardUpdate,
) => {
  return makeRequest<void>({
    url: `/dashboard/${encodeURIComponent(String(type))}`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: dashboardUpdate,
  });
};

export const getDashboardControllerUpdateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof dashboardControllerUpdate>>,
    TError,
    { type: string; data: DashboardUpdate },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof dashboardControllerUpdate>>,
  TError,
  { type: string; data: DashboardUpdate },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof dashboardControllerUpdate>>,
    { type: string; data: DashboardUpdate }
  > = (props) => {
    const { type, data } = props ?? {};

    return dashboardControllerUpdate(type, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type DashboardControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof dashboardControllerUpdate>>
>;
export type DashboardControllerUpdateMutationBody = DashboardUpdate;
export type DashboardControllerUpdateMutationError = ErrorType<unknown>;

/**
 * @summary Update dashboard
 */
export const useDashboardControllerUpdate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof dashboardControllerUpdate>>,
    TError,
    { type: string; data: DashboardUpdate },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof dashboardControllerUpdate>>,
  TError,
  { type: string; data: DashboardUpdate },
  TContext
> => {
  const mutationOptions = getDashboardControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
